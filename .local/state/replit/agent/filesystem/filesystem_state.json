{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an ERP (Enterprise Resource Planning) web application built as an Odoo clone, providing comprehensive business management functionality across multiple modules including CRM, Sales, Inventory, Accounting, HR, Project Management, and Manufacturing. The application follows a full-stack architecture with React frontend, Express backend, and PostgreSQL database.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **API Pattern**: RESTful endpoints organized by business modules\n- **Data Layer**: In-memory storage implementation with database interface abstraction\n- **Development Server**: Vite integration for hot module replacement\n- **Error Handling**: Centralized error middleware with structured responses\n\n## Database Design\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema**: PostgreSQL with comprehensive business entity modeling\n- **Structure**: Modular schema design covering all ERP modules (users, companies, leads, opportunities, partners, products, sales orders, projects, tasks, employees, activities)\n- **Migration**: Drizzle Kit for schema migrations\n\n## Module Architecture\nThe application is organized into distinct business modules:\n- **Dashboard**: KPI visualization and activity feeds\n- **CRM**: Lead and opportunity management with pipeline views\n- **Sales**: Order management and quotation system\n- **Inventory**: Product and stock management\n- **Accounting**: Financial records and reporting\n- **HR**: Employee and attendance management\n- **Project**: Task and project tracking\n- **Manufacturing**: Production order management\n\n## Component Architecture\n- **Layout System**: Modular layout with sidebar navigation and top bar\n- **View System**: Multiple view types (list, kanban, calendar, graph) for data presentation\n- **Form Handling**: React Hook Form with Zod validation\n- **Reusable Components**: Shared UI components following atomic design principles\n\n# External Dependencies\n\n## Core Technologies\n- **Database**: PostgreSQL via Neon Database serverless connection\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Validation**: Zod schemas for runtime type validation\n\n## UI and Styling\n- **Component Library**: Radix UI primitives for accessibility\n- **Design System**: shadcn/ui components with customizable themes\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Icons**: Lucide React icon library\n\n## Development Tools\n- **Build System**: Vite with React plugin\n- **Development**: Replit-specific plugins for debugging and development\n- **TypeScript**: Full type checking across frontend and backend\n- **Code Quality**: ESBuild for production bundling\n\n## Runtime Dependencies\n- **HTTP Client**: Built-in fetch API with custom query client\n- **Session Management**: Connect-pg-simple for PostgreSQL session store\n- **Date Handling**: date-fns for date manipulation\n- **Form Management**: React Hook Form with Radix UI resolvers","size_bytes":3445},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertLeadSchema, insertOpportunitySchema, insertPartnerSchema,\n  insertProductSchema, insertSalesOrderSchema, insertProjectSchema,\n  insertTaskSchema, insertEmployeeSchema, insertActivitySchema,\n  insertPurchaseOrderSchema, insertEventSchema, insertEventRegistrationSchema,\n  insertDocumentSchema, insertDocumentFolderSchema, insertVehicleSchema,\n  insertVehicleMaintenanceSchema, insertApprovalRequestSchema, insertApprovalWorkflowSchema,\n  insertEquipmentSchema, insertMaintenanceRequestSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const currentCompanyId = \"default-company\"; // In real app, this would come from session\n\n  // Dashboard endpoints\n  app.get(\"/api/dashboard/kpis\", async (req, res) => {\n    try {\n      const opportunities = await storage.getOpportunities(currentCompanyId);\n      const partners = await storage.getPartners(currentCompanyId);\n      const products = await storage.getProducts(currentCompanyId);\n      \n      const totalRevenue = opportunities\n        .filter(opp => opp.stage === \"won\")\n        .reduce((sum, opp) => sum + Number(opp.expectedRevenue || 0), 0);\n      \n      const kpis = {\n        revenue: totalRevenue,\n        customers: partners.filter(p => p.isCustomer).length,\n        opportunities: opportunities.filter(opp => opp.stage !== \"won\" && opp.stage !== \"lost\").length,\n        inventory: products.reduce((sum, product) => sum + Number(product.cost || 0) * 10, 0) // Mock inventory calculation\n      };\n      \n      res.json(kpis);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch KPIs\" });\n    }\n  });\n\n  // Opportunities endpoints\n  app.get(\"/api/opportunities\", async (req, res) => {\n    try {\n      const opportunities = await storage.getOpportunities(currentCompanyId);\n      res.json(opportunities);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch opportunities\" });\n    }\n  });\n\n  app.post(\"/api/opportunities\", async (req, res) => {\n    try {\n      const validatedData = insertOpportunitySchema.parse(req.body);\n      const opportunity = await storage.createOpportunity({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(opportunity);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid opportunity data\" });\n    }\n  });\n\n  app.patch(\"/api/opportunities/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertOpportunitySchema.partial().parse(req.body);\n      const opportunity = await storage.updateOpportunity(id, validatedData);\n      res.json(opportunity);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update opportunity\" });\n    }\n  });\n\n  // Partners endpoints\n  app.get(\"/api/partners\", async (req, res) => {\n    try {\n      const partners = await storage.getPartners(currentCompanyId);\n      res.json(partners);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch partners\" });\n    }\n  });\n\n  app.post(\"/api/partners\", async (req, res) => {\n    try {\n      const validatedData = insertPartnerSchema.parse(req.body);\n      const partner = await storage.createPartner({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(partner);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid partner data\" });\n    }\n  });\n\n  // Products endpoints\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts(currentCompanyId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid product data\" });\n    }\n  });\n\n  // Activities endpoints\n  app.get(\"/api/activities\", async (req, res) => {\n    try {\n      const activities = await storage.getActivities(currentCompanyId);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Purchase Orders endpoints\n  app.get(\"/api/purchase-orders\", async (req, res) => {\n    try {\n      const orders = await storage.getPurchaseOrders(currentCompanyId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch purchase orders\" });\n    }\n  });\n\n  app.post(\"/api/purchase-orders\", async (req, res) => {\n    try {\n      const validatedData = insertPurchaseOrderSchema.parse(req.body);\n      const order = await storage.createPurchaseOrder({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid purchase order data\" });\n    }\n  });\n\n  app.patch(\"/api/purchase-orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPurchaseOrderSchema.partial().parse(req.body);\n      const order = await storage.updatePurchaseOrder(id, validatedData);\n      res.json(order);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update purchase order\" });\n    }\n  });\n\n  app.delete(\"/api/purchase-orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePurchaseOrder(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete purchase order\" });\n    }\n  });\n\n  // Events endpoints\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const events = await storage.getEvents(currentCompanyId);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch events\" });\n    }\n  });\n\n  app.post(\"/api/events\", async (req, res) => {\n    try {\n      const validatedData = insertEventSchema.parse(req.body);\n      const event = await storage.createEvent({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(event);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid event data\" });\n    }\n  });\n\n  app.patch(\"/api/events/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertEventSchema.partial().parse(req.body);\n      const event = await storage.updateEvent(id, validatedData);\n      res.json(event);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update event\" });\n    }\n  });\n\n  app.delete(\"/api/events/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteEvent(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete event\" });\n    }\n  });\n\n  // Event Registrations endpoints\n  app.get(\"/api/events/:eventId/registrations\", async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const registrations = await storage.getEventRegistrations(eventId);\n      res.json(registrations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch event registrations\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/registrations\", async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const validatedData = insertEventRegistrationSchema.parse({ ...req.body, eventId });\n      const registration = await storage.createEventRegistration({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(registration);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid registration data\" });\n    }\n  });\n\n  // Documents endpoints\n  app.get(\"/api/documents\", async (req, res) => {\n    try {\n      const documents = await storage.getDocuments(currentCompanyId);\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/documents\", async (req, res) => {\n    try {\n      const validatedData = insertDocumentSchema.parse(req.body);\n      const document = await storage.createDocument({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(document);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid document data\" });\n    }\n  });\n\n  app.patch(\"/api/documents/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertDocumentSchema.partial().parse(req.body);\n      const document = await storage.updateDocument(id, validatedData);\n      res.json(document);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteDocument(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  // Document Folders endpoints\n  app.get(\"/api/document-folders\", async (req, res) => {\n    try {\n      const folders = await storage.getDocumentFolders(currentCompanyId);\n      res.json(folders);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch folders\" });\n    }\n  });\n\n  app.post(\"/api/document-folders\", async (req, res) => {\n    try {\n      const validatedData = insertDocumentFolderSchema.parse(req.body);\n      const folder = await storage.createDocumentFolder({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(folder);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid folder data\" });\n    }\n  });\n\n  // Fleet endpoints\n  app.get(\"/api/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await storage.getVehicles(currentCompanyId);\n      res.json(vehicles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.post(\"/api/vehicles\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.parse(req.body);\n      const vehicle = await storage.createVehicle({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(vehicle);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid vehicle data\" });\n    }\n  });\n\n  app.patch(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertVehicleSchema.partial().parse(req.body);\n      const vehicle = await storage.updateVehicle(id, validatedData);\n      res.json(vehicle);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update vehicle\" });\n    }\n  });\n\n  app.delete(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteVehicle(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete vehicle\" });\n    }\n  });\n\n  // Vehicle Maintenance endpoints\n  app.get(\"/api/vehicles/:vehicleId/maintenance\", async (req, res) => {\n    try {\n      const { vehicleId } = req.params;\n      const maintenance = await storage.getVehicleMaintenance(vehicleId);\n      res.json(maintenance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch maintenance records\" });\n    }\n  });\n\n  app.post(\"/api/vehicles/:vehicleId/maintenance\", async (req, res) => {\n    try {\n      const { vehicleId } = req.params;\n      const validatedData = insertVehicleMaintenanceSchema.parse({ ...req.body, vehicleId });\n      const maintenance = await storage.createVehicleMaintenance({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(maintenance);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid maintenance data\" });\n    }\n  });\n\n  // Approval Requests endpoints\n  app.get(\"/api/approval-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getApprovalRequests(currentCompanyId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch approval requests\" });\n    }\n  });\n\n  app.post(\"/api/approval-requests\", async (req, res) => {\n    try {\n      const validatedData = insertApprovalRequestSchema.parse(req.body);\n      const request = await storage.createApprovalRequest({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(request);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid approval request data\" });\n    }\n  });\n\n  app.patch(\"/api/approval-requests/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertApprovalRequestSchema.partial().parse(req.body);\n      const request = await storage.updateApprovalRequest(id, validatedData);\n      res.json(request);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update approval request\" });\n    }\n  });\n\n  app.delete(\"/api/approval-requests/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteApprovalRequest(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete approval request\" });\n    }\n  });\n\n  // Equipment endpoints\n  app.get(\"/api/equipment\", async (req, res) => {\n    try {\n      const equipment = await storage.getEquipment(currentCompanyId);\n      res.json(equipment);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch equipment\" });\n    }\n  });\n\n  app.post(\"/api/equipment\", async (req, res) => {\n    try {\n      const validatedData = insertEquipmentSchema.parse(req.body);\n      const equipment = await storage.createEquipment({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(equipment);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid equipment data\" });\n    }\n  });\n\n  app.patch(\"/api/equipment/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertEquipmentSchema.partial().parse(req.body);\n      const equipment = await storage.updateEquipment(id, validatedData);\n      res.json(equipment);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update equipment\" });\n    }\n  });\n\n  app.delete(\"/api/equipment/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteEquipment(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete equipment\" });\n    }\n  });\n\n  // Maintenance Requests endpoints\n  app.get(\"/api/maintenance-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getMaintenanceRequests(currentCompanyId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch maintenance requests\" });\n    }\n  });\n\n  app.post(\"/api/maintenance-requests\", async (req, res) => {\n    try {\n      const validatedData = insertMaintenanceRequestSchema.parse(req.body);\n      const request = await storage.createMaintenanceRequest({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(request);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid maintenance request data\" });\n    }\n  });\n\n  app.patch(\"/api/maintenance-requests/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertMaintenanceRequestSchema.partial().parse(req.body);\n      const request = await storage.updateMaintenanceRequest(id, validatedData);\n      res.json(request);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update maintenance request\" });\n    }\n  });\n\n  app.delete(\"/api/maintenance-requests/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteMaintenanceRequest(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete maintenance request\" });\n    }\n  });\n\n  app.post(\"/api/activities\", async (req, res) => {\n    try {\n      const validatedData = insertActivitySchema.parse(req.body);\n      const activity = await storage.createActivity({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(activity);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid activity data\" });\n    }\n  });\n\n  // Projects endpoints\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects(currentCompanyId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  // Tasks endpoints\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks(currentCompanyId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask({\n        ...validatedData,\n        companyId: currentCompanyId\n      });\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid task data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":18212},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Company, type InsertCompany,\n  type Lead, type InsertLead, type Opportunity, type InsertOpportunity,\n  type Partner, type InsertPartner, type Product, type InsertProduct,\n  type SalesOrder, type InsertSalesOrder, type Project, type InsertProject,\n  type Task, type InsertTask, type Employee, type InsertEmployee,\n  type Activity, type InsertActivity, type PurchaseOrder, type InsertPurchaseOrder,\n  type Event, type InsertEvent, type EventRegistration, type InsertEventRegistration,\n  type Document, type InsertDocument, type DocumentFolder, type InsertDocumentFolder,\n  type Vehicle, type InsertVehicle, type VehicleMaintenance, type InsertVehicleMaintenance,\n  type ApprovalRequest, type InsertApprovalRequest, type ApprovalWorkflow, type InsertApprovalWorkflow,\n  type Equipment, type InsertEquipment, type MaintenanceRequest, type InsertMaintenanceRequest,\n  companies, users, leads, opportunities, partners, products,\n  salesOrders, projects, tasks, employees, activities, purchaseOrders,\n  events, eventRegistrations, documents, documentFolders, vehicles, vehicleMaintenance,\n  approvalRequests, approvalWorkflows, equipment, maintenanceRequests\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // Users and Companies\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getUsers(companyId: string): Promise<User[]>;\n  getCompany(id: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company>;\n  deleteCompany(id: string): Promise<void>;\n  getCompanies(): Promise<Company[]>;\n  \n  // CRM\n  getLeads(companyId: string): Promise<Lead[]>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, lead: Partial<InsertLead>): Promise<Lead>;\n  deleteLead(id: string): Promise<void>;\n  getOpportunities(companyId: string): Promise<Opportunity[]>;\n  createOpportunity(opportunity: InsertOpportunity): Promise<Opportunity>;\n  updateOpportunity(id: string, opportunity: Partial<InsertOpportunity>): Promise<Opportunity>;\n  deleteOpportunity(id: string): Promise<void>;\n  \n  // Partners\n  getPartners(companyId: string): Promise<Partner[]>;\n  createPartner(partner: InsertPartner): Promise<Partner>;\n  updatePartner(id: string, partner: Partial<InsertPartner>): Promise<Partner>;\n  deletePartner(id: string): Promise<void>;\n  \n  // Products\n  getProducts(companyId: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Sales\n  getSalesOrders(companyId: string): Promise<SalesOrder[]>;\n  createSalesOrder(order: InsertSalesOrder): Promise<SalesOrder>;\n  updateSalesOrder(id: string, order: Partial<InsertSalesOrder>): Promise<SalesOrder>;\n  deleteSalesOrder(id: string): Promise<void>;\n  \n  // Projects\n  getProjects(companyId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n  getTasks(companyId: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  \n  // HR\n  getEmployees(companyId: string): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee>;\n  deleteEmployee(id: string): Promise<void>;\n  \n  // Activities\n  getActivities(companyId: string): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n  updateActivity(id: string, activity: Partial<InsertActivity>): Promise<Activity>;\n  deleteActivity(id: string): Promise<void>;\n\n  // Purchase Orders\n  getPurchaseOrders(companyId: string): Promise<PurchaseOrder[]>;\n  createPurchaseOrder(order: InsertPurchaseOrder): Promise<PurchaseOrder>;\n  updatePurchaseOrder(id: string, order: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder>;\n  deletePurchaseOrder(id: string): Promise<void>;\n\n  // Events\n  getEvents(companyId: string): Promise<Event[]>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n  getEventRegistrations(eventId: string): Promise<EventRegistration[]>;\n  createEventRegistration(registration: InsertEventRegistration): Promise<EventRegistration>;\n  updateEventRegistration(id: string, registration: Partial<InsertEventRegistration>): Promise<EventRegistration>;\n  deleteEventRegistration(id: string): Promise<void>;\n\n  // Documents\n  getDocuments(companyId: string): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, document: Partial<InsertDocument>): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n  getDocumentFolders(companyId: string): Promise<DocumentFolder[]>;\n  createDocumentFolder(folder: InsertDocumentFolder): Promise<DocumentFolder>;\n  updateDocumentFolder(id: string, folder: Partial<InsertDocumentFolder>): Promise<DocumentFolder>;\n  deleteDocumentFolder(id: string): Promise<void>;\n\n  // Fleet Management\n  getVehicles(companyId: string): Promise<Vehicle[]>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle>;\n  deleteVehicle(id: string): Promise<void>;\n  getVehicleMaintenance(vehicleId: string): Promise<VehicleMaintenance[]>;\n  createVehicleMaintenance(maintenance: InsertVehicleMaintenance): Promise<VehicleMaintenance>;\n  updateVehicleMaintenance(id: string, maintenance: Partial<InsertVehicleMaintenance>): Promise<VehicleMaintenance>;\n  deleteVehicleMaintenance(id: string): Promise<void>;\n\n  // Approvals\n  getApprovalRequests(companyId: string): Promise<ApprovalRequest[]>;\n  createApprovalRequest(request: InsertApprovalRequest): Promise<ApprovalRequest>;\n  updateApprovalRequest(id: string, request: Partial<InsertApprovalRequest>): Promise<ApprovalRequest>;\n  deleteApprovalRequest(id: string): Promise<void>;\n  getApprovalWorkflows(requestId: string): Promise<ApprovalWorkflow[]>;\n  createApprovalWorkflow(workflow: InsertApprovalWorkflow): Promise<ApprovalWorkflow>;\n  updateApprovalWorkflow(id: string, workflow: Partial<InsertApprovalWorkflow>): Promise<ApprovalWorkflow>;\n  deleteApprovalWorkflow(id: string): Promise<void>;\n\n  // Equipment & Maintenance\n  getEquipment(companyId: string): Promise<Equipment[]>;\n  createEquipment(equipment: InsertEquipment): Promise<Equipment>;\n  updateEquipment(id: string, equipment: Partial<InsertEquipment>): Promise<Equipment>;\n  deleteEquipment(id: string): Promise<void>;\n  getMaintenanceRequests(companyId: string): Promise<MaintenanceRequest[]>;\n  createMaintenanceRequest(request: InsertMaintenanceRequest): Promise<MaintenanceRequest>;\n  updateMaintenanceRequest(id: string, request: Partial<InsertMaintenanceRequest>): Promise<MaintenanceRequest>;\n  deleteMaintenanceRequest(id: string): Promise<void>;\n\n  // Auth helpers\n  validatePassword(plainPassword: string, hashedPassword: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.initializeDefaultData();\n  }\n\n  private async initializeDefaultData() {\n    try {\n      // Check if default company exists\n      const existingCompany = await db.select().from(companies).where(eq(companies.id, \"default-company\")).limit(1);\n      \n      if (existingCompany.length === 0) {\n        // Create default company\n        await db.insert(companies).values({\n          id: \"default-company\",\n          name: \"Demo Company\",\n          currency: \"USD\",\n          timezone: \"UTC\",\n          country: \"United States\",\n          settings: {}\n        });\n      }\n\n      // Check if default admin user exists\n      const existingAdmin = await db.select().from(users).where(eq(users.username, \"admin\")).limit(1);\n      \n      if (existingAdmin.length === 0) {\n        // Create default admin user\n        const hashedPassword = await bcrypt.hash(\"admin\", 10);\n        await db.insert(users).values({\n          username: \"admin\",\n          email: \"admin@demo.com\",\n          name: \"System Administrator\",\n          password: hashedPassword,\n          companyId: \"default-company\",\n          isActive: true,\n          roles: [\"admin\"],\n          settings: {}\n        });\n      }\n    } catch (error) {\n      console.error(\"Error initializing default data:\", error);\n    }\n  }\n\n  // Users and Companies\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash password before storing\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    \n    const [user] = await db.insert(users).values({\n      ...insertUser,\n      password: hashedPassword,\n      companyId: insertUser.companyId ?? null,\n      isActive: insertUser.isActive ?? true,\n      roles: insertUser.roles ?? [],\n      settings: insertUser.settings ?? {}\n    }).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User> {\n    // Hash password if being updated\n    if (updateData.password) {\n      updateData.password = await bcrypt.hash(updateData.password, 10);\n    }\n    \n    const [user] = await db.update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async validatePassword(plainPassword: string, hashedPassword: string): Promise<boolean> {\n    return await bcrypt.compare(plainPassword, hashedPassword);\n  }\n\n  async getUsers(companyId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.companyId, companyId));\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.id, id)).limit(1);\n    return company;\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const [company] = await db.insert(companies).values({\n      ...insertCompany,\n      country: insertCompany.country ?? null,\n      currency: insertCompany.currency ?? \"USD\",\n      timezone: insertCompany.timezone ?? \"UTC\",\n      settings: insertCompany.settings ?? {}\n    }).returning();\n    return company;\n  }\n\n  async updateCompany(id: string, updateData: Partial<InsertCompany>): Promise<Company> {\n    const [company] = await db.update(companies)\n      .set(updateData)\n      .where(eq(companies.id, id))\n      .returning();\n    return company;\n  }\n\n  async deleteCompany(id: string): Promise<void> {\n    await db.delete(companies).where(eq(companies.id, id));\n  }\n\n  async getCompanies(): Promise<Company[]> {\n    return await db.select().from(companies);\n  }\n\n  // CRM\n  async getLeads(companyId: string): Promise<Lead[]> {\n    return await db.select().from(leads).where(eq(leads.companyId, companyId));\n  }\n\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db.insert(leads).values({\n      ...insertLead,\n      email: insertLead.email ?? null,\n      phone: insertLead.phone ?? null,\n      company: insertLead.company ?? null,\n      source: insertLead.source ?? null,\n      description: insertLead.description ?? null,\n      assignedTo: insertLead.assignedTo ?? null,\n      companyId: insertLead.companyId ?? null,\n      stage: insertLead.stage ?? \"new\",\n      probability: insertLead.probability ?? 0,\n      expectedRevenue: insertLead.expectedRevenue ?? null\n    }).returning();\n    return lead;\n  }\n\n  async updateLead(id: string, updateData: Partial<InsertLead>): Promise<Lead> {\n    const [lead] = await db.update(leads)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(leads.id, id))\n      .returning();\n    return lead;\n  }\n\n  async deleteLead(id: string): Promise<void> {\n    await db.delete(leads).where(eq(leads.id, id));\n  }\n\n  async getOpportunities(companyId: string): Promise<Opportunity[]> {\n    return await db.select().from(opportunities).where(eq(opportunities.companyId, companyId));\n  }\n\n  async createOpportunity(insertOpportunity: InsertOpportunity): Promise<Opportunity> {\n    const [opportunity] = await db.insert(opportunities).values({\n      ...insertOpportunity,\n      partnerId: insertOpportunity.partnerId ?? null,\n      description: insertOpportunity.description ?? null,\n      expectedRevenue: insertOpportunity.expectedRevenue ?? null,\n      closeDate: insertOpportunity.closeDate ?? null,\n      assignedTo: insertOpportunity.assignedTo ?? null,\n      companyId: insertOpportunity.companyId ?? null,\n      stage: insertOpportunity.stage ?? \"new\",\n      probability: insertOpportunity.probability ?? 0\n    }).returning();\n    return opportunity;\n  }\n\n  async updateOpportunity(id: string, updateData: Partial<InsertOpportunity>): Promise<Opportunity> {\n    const [opportunity] = await db.update(opportunities)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(opportunities.id, id))\n      .returning();\n    return opportunity;\n  }\n\n  async deleteOpportunity(id: string): Promise<void> {\n    await db.delete(opportunities).where(eq(opportunities.id, id));\n  }\n\n  // Partners\n  async getPartners(companyId: string): Promise<Partner[]> {\n    return await db.select().from(partners).where(eq(partners.companyId, companyId));\n  }\n\n  async createPartner(insertPartner: InsertPartner): Promise<Partner> {\n    const [partner] = await db.insert(partners).values({\n      ...insertPartner,\n      email: insertPartner.email ?? null,\n      phone: insertPartner.phone ?? null,\n      website: insertPartner.website ?? null,\n      street: insertPartner.street ?? null,\n      city: insertPartner.city ?? null,\n      state: insertPartner.state ?? null,\n      zip: insertPartner.zip ?? null,\n      country: insertPartner.country ?? null,\n      vatNumber: insertPartner.vatNumber ?? null,\n      companyId: insertPartner.companyId ?? null,\n      isCustomer: insertPartner.isCustomer ?? true,\n      isVendor: insertPartner.isVendor ?? false\n    }).returning();\n    return partner;\n  }\n\n  async updatePartner(id: string, updateData: Partial<InsertPartner>): Promise<Partner> {\n    const [partner] = await db.update(partners)\n      .set(updateData)\n      .where(eq(partners.id, id))\n      .returning();\n    return partner;\n  }\n\n  async deletePartner(id: string): Promise<void> {\n    await db.delete(partners).where(eq(partners.id, id));\n  }\n\n  // Products\n  async getProducts(companyId: string): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.companyId, companyId));\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values({\n      ...insertProduct,\n      internalReference: insertProduct.internalReference ?? null,\n      barcode: insertProduct.barcode ?? null,\n      salePrice: insertProduct.salePrice ?? null,\n      cost: insertProduct.cost ?? null,\n      category: insertProduct.category ?? null,\n      description: insertProduct.description ?? null,\n      companyId: insertProduct.companyId ?? null,\n      active: insertProduct.active ?? true,\n      type: insertProduct.type ?? \"storable\"\n    }).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db.update(products)\n      .set(updateData)\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  // Sales\n  async getSalesOrders(companyId: string): Promise<SalesOrder[]> {\n    return await db.select().from(salesOrders).where(eq(salesOrders.companyId, companyId));\n  }\n\n  async createSalesOrder(insertSalesOrder: InsertSalesOrder): Promise<SalesOrder> {\n    const [order] = await db.insert(salesOrders).values({\n      ...insertSalesOrder,\n      partnerId: insertSalesOrder.partnerId ?? null,\n      deliveryDate: insertSalesOrder.deliveryDate ?? null,\n      salespersonId: insertSalesOrder.salespersonId ?? null,\n      companyId: insertSalesOrder.companyId ?? null,\n      state: insertSalesOrder.state ?? \"draft\",\n      totalAmount: insertSalesOrder.totalAmount ?? \"0\",\n      currency: insertSalesOrder.currency ?? \"USD\",\n      orderDate: insertSalesOrder.orderDate ?? new Date()\n    }).returning();\n    return order;\n  }\n\n  async updateSalesOrder(id: string, updateData: Partial<InsertSalesOrder>): Promise<SalesOrder> {\n    const [order] = await db.update(salesOrders)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(salesOrders.id, id))\n      .returning();\n    return order;\n  }\n\n  async deleteSalesOrder(id: string): Promise<void> {\n    await db.delete(salesOrders).where(eq(salesOrders.id, id));\n  }\n\n  // Projects\n  async getProjects(companyId: string): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.companyId, companyId));\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values({\n      ...insertProject,\n      description: insertProject.description ?? null,\n      partnerId: insertProject.partnerId ?? null,\n      managerId: insertProject.managerId ?? null,\n      startDate: insertProject.startDate ?? null,\n      endDate: insertProject.endDate ?? null,\n      companyId: insertProject.companyId ?? null,\n      state: insertProject.state ?? \"active\"\n    }).returning();\n    return project;\n  }\n\n  async updateProject(id: string, updateData: Partial<InsertProject>): Promise<Project> {\n    const [project] = await db.update(projects)\n      .set(updateData)\n      .where(eq(projects.id, id))\n      .returning();\n    return project;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  async getTasks(companyId: string): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.companyId, companyId));\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await db.insert(tasks).values({\n      ...insertTask,\n      description: insertTask.description ?? null,\n      projectId: insertTask.projectId ?? null,\n      assignedTo: insertTask.assignedTo ?? null,\n      dueDate: insertTask.dueDate ?? null,\n      companyId: insertTask.companyId ?? null,\n      stage: insertTask.stage ?? \"todo\",\n      priority: insertTask.priority ?? \"normal\"\n    }).returning();\n    return task;\n  }\n\n  async updateTask(id: string, updateData: Partial<InsertTask>): Promise<Task> {\n    const [task] = await db.update(tasks)\n      .set(updateData)\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  // HR\n  async getEmployees(companyId: string): Promise<Employee[]> {\n    return await db.select().from(employees).where(eq(employees.companyId, companyId));\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const [employee] = await db.insert(employees).values({\n      ...insertEmployee,\n      userId: insertEmployee.userId ?? null,\n      employeeId: insertEmployee.employeeId ?? null,\n      jobTitle: insertEmployee.jobTitle ?? null,\n      department: insertEmployee.department ?? null,\n      managerId: insertEmployee.managerId ?? null,\n      hireDate: insertEmployee.hireDate ?? null,\n      salary: insertEmployee.salary ?? null,\n      companyId: insertEmployee.companyId ?? null,\n      currency: insertEmployee.currency ?? \"USD\"\n    }).returning();\n    return employee;\n  }\n\n  async updateEmployee(id: string, updateData: Partial<InsertEmployee>): Promise<Employee> {\n    const [employee] = await db.update(employees)\n      .set(updateData)\n      .where(eq(employees.id, id))\n      .returning();\n    return employee;\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    await db.delete(employees).where(eq(employees.id, id));\n  }\n\n  // Activities\n  async getActivities(companyId: string): Promise<Activity[]> {\n    return await db.select().from(activities).where(eq(activities.companyId, companyId));\n  }\n\n  async createActivity(insertActivity: InsertActivity): Promise<Activity> {\n    const [activity] = await db.insert(activities).values({\n      ...insertActivity,\n      description: insertActivity.description ?? null,\n      startDate: insertActivity.startDate ?? null,\n      endDate: insertActivity.endDate ?? null,\n      assignedTo: insertActivity.assignedTo ?? null,\n      relatedRecord: insertActivity.relatedRecord ?? null,\n      companyId: insertActivity.companyId ?? null\n    }).returning();\n    return activity;\n  }\n\n  async updateActivity(id: string, updateData: Partial<InsertActivity>): Promise<Activity> {\n    const [activity] = await db.update(activities)\n      .set(updateData)\n      .where(eq(activities.id, id))\n      .returning();\n    return activity;\n  }\n\n  async deleteActivity(id: string): Promise<void> {\n    await db.delete(activities).where(eq(activities.id, id));\n  }\n\n  // Purchase Orders\n  async getPurchaseOrders(companyId: string): Promise<PurchaseOrder[]> {\n    return await db.select().from(purchaseOrders).where(eq(purchaseOrders.companyId, companyId));\n  }\n\n  async createPurchaseOrder(insertPurchaseOrder: InsertPurchaseOrder): Promise<PurchaseOrder> {\n    const [order] = await db.insert(purchaseOrders).values({\n      ...insertPurchaseOrder,\n      vendorId: insertPurchaseOrder.vendorId ?? null,\n      receiptDate: insertPurchaseOrder.receiptDate ?? null,\n      companyId: insertPurchaseOrder.companyId ?? null,\n      state: insertPurchaseOrder.state ?? \"draft\",\n      totalAmount: insertPurchaseOrder.totalAmount ?? \"0\",\n      currency: insertPurchaseOrder.currency ?? \"USD\",\n      orderDate: insertPurchaseOrder.orderDate ?? new Date()\n    }).returning();\n    return order;\n  }\n\n  async updatePurchaseOrder(id: string, updateData: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder> {\n    const [order] = await db.update(purchaseOrders)\n      .set(updateData)\n      .where(eq(purchaseOrders.id, id))\n      .returning();\n    return order;\n  }\n\n  async deletePurchaseOrder(id: string): Promise<void> {\n    await db.delete(purchaseOrders).where(eq(purchaseOrders.id, id));\n  }\n\n  // Events\n  async getEvents(companyId: string): Promise<Event[]> {\n    return await db.select().from(events).where(eq(events.companyId, companyId));\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const [event] = await db.insert(events).values({\n      ...insertEvent,\n      description: insertEvent.description ?? null,\n      startDate: insertEvent.startDate ?? null,\n      endDate: insertEvent.endDate ?? null,\n      venue: insertEvent.venue ?? null,\n      capacity: insertEvent.capacity ?? null,\n      registrationDeadline: insertEvent.registrationDeadline ?? null,\n      organizerId: insertEvent.organizerId ?? null,\n      companyId: insertEvent.companyId ?? null,\n      status: insertEvent.status ?? \"draft\"\n    }).returning();\n    return event;\n  }\n\n  async updateEvent(id: string, updateData: Partial<InsertEvent>): Promise<Event> {\n    const [event] = await db.update(events)\n      .set(updateData)\n      .where(eq(events.id, id))\n      .returning();\n    return event;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  async getEventRegistrations(eventId: string): Promise<EventRegistration[]> {\n    return await db.select().from(eventRegistrations).where(eq(eventRegistrations.eventId, eventId));\n  }\n\n  async createEventRegistration(insertRegistration: InsertEventRegistration): Promise<EventRegistration> {\n    const [registration] = await db.insert(eventRegistrations).values({\n      ...insertRegistration,\n      companyId: insertRegistration.companyId ?? null,\n      status: insertRegistration.status ?? \"confirmed\",\n      registrationDate: insertRegistration.registrationDate ?? new Date()\n    }).returning();\n    return registration;\n  }\n\n  async updateEventRegistration(id: string, updateData: Partial<InsertEventRegistration>): Promise<EventRegistration> {\n    const [registration] = await db.update(eventRegistrations)\n      .set(updateData)\n      .where(eq(eventRegistrations.id, id))\n      .returning();\n    return registration;\n  }\n\n  async deleteEventRegistration(id: string): Promise<void> {\n    await db.delete(eventRegistrations).where(eq(eventRegistrations.id, id));\n  }\n\n  // Documents\n  async getDocuments(companyId: string): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.companyId, companyId));\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db.insert(documents).values({\n      ...insertDocument,\n      fileSize: insertDocument.fileSize ?? null,\n      mimeType: insertDocument.mimeType ?? null,\n      folderId: insertDocument.folderId ?? null,\n      ownerId: insertDocument.ownerId ?? null,\n      companyId: insertDocument.companyId ?? null,\n      tags: insertDocument.tags ?? [],\n      isShared: insertDocument.isShared ?? false\n    }).returning();\n    return document;\n  }\n\n  async updateDocument(id: string, updateData: Partial<InsertDocument>): Promise<Document> {\n    const [document] = await db.update(documents)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(documents.id, id))\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  async getDocumentFolders(companyId: string): Promise<DocumentFolder[]> {\n    return await db.select().from(documentFolders).where(eq(documentFolders.companyId, companyId));\n  }\n\n  async createDocumentFolder(insertFolder: InsertDocumentFolder): Promise<DocumentFolder> {\n    const [folder] = await db.insert(documentFolders).values({\n      ...insertFolder,\n      parentId: insertFolder.parentId ?? null,\n      ownerId: insertFolder.ownerId ?? null,\n      companyId: insertFolder.companyId ?? null\n    }).returning();\n    return folder;\n  }\n\n  async updateDocumentFolder(id: string, updateData: Partial<InsertDocumentFolder>): Promise<DocumentFolder> {\n    const [folder] = await db.update(documentFolders)\n      .set(updateData)\n      .where(eq(documentFolders.id, id))\n      .returning();\n    return folder;\n  }\n\n  async deleteDocumentFolder(id: string): Promise<void> {\n    await db.delete(documentFolders).where(eq(documentFolders.id, id));\n  }\n\n  // Fleet Management\n  async getVehicles(companyId: string): Promise<Vehicle[]> {\n    return await db.select().from(vehicles).where(eq(vehicles.companyId, companyId));\n  }\n\n  async createVehicle(insertVehicle: InsertVehicle): Promise<Vehicle> {\n    const [vehicle] = await db.insert(vehicles).values({\n      ...insertVehicle,\n      year: insertVehicle.year ?? null,\n      licensePlate: insertVehicle.licensePlate ?? null,\n      vin: insertVehicle.vin ?? null,\n      driverId: insertVehicle.driverId ?? null,\n      location: insertVehicle.location ?? null,\n      nextServiceDate: insertVehicle.nextServiceDate ?? null,\n      companyId: insertVehicle.companyId ?? null,\n      status: insertVehicle.status ?? \"active\",\n      mileage: insertVehicle.mileage ?? 0\n    }).returning();\n    return vehicle;\n  }\n\n  async updateVehicle(id: string, updateData: Partial<InsertVehicle>): Promise<Vehicle> {\n    const [vehicle] = await db.update(vehicles)\n      .set(updateData)\n      .where(eq(vehicles.id, id))\n      .returning();\n    return vehicle;\n  }\n\n  async deleteVehicle(id: string): Promise<void> {\n    await db.delete(vehicles).where(eq(vehicles.id, id));\n  }\n\n  async getVehicleMaintenance(vehicleId: string): Promise<VehicleMaintenance[]> {\n    return await db.select().from(vehicleMaintenance).where(eq(vehicleMaintenance.vehicleId, vehicleId));\n  }\n\n  async createVehicleMaintenance(insertMaintenance: InsertVehicleMaintenance): Promise<VehicleMaintenance> {\n    const [maintenance] = await db.insert(vehicleMaintenance).values({\n      ...insertMaintenance,\n      description: insertMaintenance.description ?? null,\n      cost: insertMaintenance.cost ?? null,\n      serviceDate: insertMaintenance.serviceDate ?? null,\n      nextServiceDate: insertMaintenance.nextServiceDate ?? null,\n      mechanicId: insertMaintenance.mechanicId ?? null,\n      companyId: insertMaintenance.companyId ?? null,\n      status: insertMaintenance.status ?? \"scheduled\"\n    }).returning();\n    return maintenance;\n  }\n\n  async updateVehicleMaintenance(id: string, updateData: Partial<InsertVehicleMaintenance>): Promise<VehicleMaintenance> {\n    const [maintenance] = await db.update(vehicleMaintenance)\n      .set(updateData)\n      .where(eq(vehicleMaintenance.id, id))\n      .returning();\n    return maintenance;\n  }\n\n  async deleteVehicleMaintenance(id: string): Promise<void> {\n    await db.delete(vehicleMaintenance).where(eq(vehicleMaintenance.id, id));\n  }\n\n  // Approvals\n  async getApprovalRequests(companyId: string): Promise<ApprovalRequest[]> {\n    return await db.select().from(approvalRequests).where(eq(approvalRequests.companyId, companyId));\n  }\n\n  async createApprovalRequest(insertRequest: InsertApprovalRequest): Promise<ApprovalRequest> {\n    const [request] = await db.insert(approvalRequests).values({\n      ...insertRequest,\n      description: insertRequest.description ?? null,\n      amount: insertRequest.amount ?? null,\n      requesterId: insertRequest.requesterId ?? null,\n      companyId: insertRequest.companyId ?? null,\n      status: insertRequest.status ?? \"pending\",\n      priority: insertRequest.priority ?? \"medium\"\n    }).returning();\n    return request;\n  }\n\n  async updateApprovalRequest(id: string, updateData: Partial<InsertApprovalRequest>): Promise<ApprovalRequest> {\n    const [request] = await db.update(approvalRequests)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(approvalRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async deleteApprovalRequest(id: string): Promise<void> {\n    await db.delete(approvalRequests).where(eq(approvalRequests.id, id));\n  }\n\n  async getApprovalWorkflows(requestId: string): Promise<ApprovalWorkflow[]> {\n    return await db.select().from(approvalWorkflows).where(eq(approvalWorkflows.requestId, requestId));\n  }\n\n  async createApprovalWorkflow(insertWorkflow: InsertApprovalWorkflow): Promise<ApprovalWorkflow> {\n    const [workflow] = await db.insert(approvalWorkflows).values({\n      ...insertWorkflow,\n      comments: insertWorkflow.comments ?? null,\n      actionDate: insertWorkflow.actionDate ?? null,\n      companyId: insertWorkflow.companyId ?? null,\n      status: insertWorkflow.status ?? \"pending\"\n    }).returning();\n    return workflow;\n  }\n\n  async updateApprovalWorkflow(id: string, updateData: Partial<InsertApprovalWorkflow>): Promise<ApprovalWorkflow> {\n    const [workflow] = await db.update(approvalWorkflows)\n      .set(updateData)\n      .where(eq(approvalWorkflows.id, id))\n      .returning();\n    return workflow;\n  }\n\n  async deleteApprovalWorkflow(id: string): Promise<void> {\n    await db.delete(approvalWorkflows).where(eq(approvalWorkflows.id, id));\n  }\n\n  // Equipment & Maintenance\n  async getEquipment(companyId: string): Promise<Equipment[]> {\n    return await db.select().from(equipment).where(eq(equipment.companyId, companyId));\n  }\n\n  async createEquipment(insertEquipment: InsertEquipment): Promise<Equipment> {\n    const [equipmentRecord] = await db.insert(equipment).values({\n      ...insertEquipment,\n      serialNumber: insertEquipment.serialNumber ?? null,\n      category: insertEquipment.category ?? null,\n      location: insertEquipment.location ?? null,\n      purchaseDate: insertEquipment.purchaseDate ?? null,\n      warrantyExpiry: insertEquipment.warrantyExpiry ?? null,\n      companyId: insertEquipment.companyId ?? null,\n      status: insertEquipment.status ?? \"operational\"\n    }).returning();\n    return equipmentRecord;\n  }\n\n  async updateEquipment(id: string, updateData: Partial<InsertEquipment>): Promise<Equipment> {\n    const [equipmentRecord] = await db.update(equipment)\n      .set(updateData)\n      .where(eq(equipment.id, id))\n      .returning();\n    return equipmentRecord;\n  }\n\n  async deleteEquipment(id: string): Promise<void> {\n    await db.delete(equipment).where(eq(equipment.id, id));\n  }\n\n  async getMaintenanceRequests(companyId: string): Promise<MaintenanceRequest[]> {\n    return await db.select().from(maintenanceRequests).where(eq(maintenanceRequests.companyId, companyId));\n  }\n\n  async createMaintenanceRequest(insertRequest: InsertMaintenanceRequest): Promise<MaintenanceRequest> {\n    const [request] = await db.insert(maintenanceRequests).values({\n      ...insertRequest,\n      description: insertRequest.description ?? null,\n      assignedTo: insertRequest.assignedTo ?? null,\n      requesterId: insertRequest.requesterId ?? null,\n      dueDate: insertRequest.dueDate ?? null,\n      completedDate: insertRequest.completedDate ?? null,\n      companyId: insertRequest.companyId ?? null,\n      status: insertRequest.status ?? \"pending\",\n      priority: insertRequest.priority ?? \"medium\"\n    }).returning();\n    return request;\n  }\n\n  async updateMaintenanceRequest(id: string, updateData: Partial<InsertMaintenanceRequest>): Promise<MaintenanceRequest> {\n    const [request] = await db.update(maintenanceRequests)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(maintenanceRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async deleteMaintenanceRequest(id: string): Promise<void> {\n    await db.delete(maintenanceRequests).where(eq(maintenanceRequests.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":34684},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Core Company and User Management\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default(\"USD\"),\n  country: text(\"country\"),\n  timezone: text(\"timezone\").default(\"UTC\"),\n  settings: jsonb(\"settings\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  isActive: boolean(\"is_active\").default(true),\n  roles: jsonb(\"roles\").default([]),\n  settings: jsonb(\"settings\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// CRM Module\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  company: text(\"company\"),\n  source: text(\"source\"),\n  stage: text(\"stage\").default(\"new\"),\n  probability: integer(\"probability\").default(0),\n  expectedRevenue: decimal(\"expected_revenue\", { precision: 15, scale: 2 }),\n  description: text(\"description\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const opportunities = pgTable(\"opportunities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  partnerId: varchar(\"partner_id\").references(() => partners.id),\n  stage: text(\"stage\").default(\"new\"),\n  probability: integer(\"probability\").default(0),\n  expectedRevenue: decimal(\"expected_revenue\", { precision: 15, scale: 2 }),\n  closeDate: timestamp(\"close_date\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Partners (Customers/Vendors)\nexport const partners = pgTable(\"partners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  website: text(\"website\"),\n  isCustomer: boolean(\"is_customer\").default(true),\n  isVendor: boolean(\"is_vendor\").default(false),\n  street: text(\"street\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  zip: text(\"zip\"),\n  country: text(\"country\"),\n  vatNumber: text(\"vat_number\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products and Inventory\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  internalReference: text(\"internal_reference\"),\n  barcode: text(\"barcode\"),\n  salePrice: decimal(\"sale_price\", { precision: 15, scale: 2 }),\n  cost: decimal(\"cost\", { precision: 15, scale: 2 }),\n  category: text(\"category\"),\n  type: text(\"type\").default(\"storable\"), // storable, consumable, service\n  description: text(\"description\"),\n  active: boolean(\"active\").default(true),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const inventory = pgTable(\"inventory\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id),\n  location: text(\"location\").default(\"WH/Stock\"),\n  quantityOnHand: decimal(\"quantity_on_hand\", { precision: 15, scale: 2 }).default(\"0\"),\n  quantityReserved: decimal(\"quantity_reserved\", { precision: 15, scale: 2 }).default(\"0\"),\n  quantityAvailable: decimal(\"quantity_available\", { precision: 15, scale: 2 }).default(\"0\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sales Module\nexport const salesOrders = pgTable(\"sales_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  partnerId: varchar(\"partner_id\").references(() => partners.id),\n  state: text(\"state\").default(\"draft\"), // draft, sent, confirmed, done, cancel\n  totalAmount: decimal(\"total_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  currency: varchar(\"currency\", { length: 3 }).default(\"USD\"),\n  orderDate: timestamp(\"order_date\").defaultNow(),\n  deliveryDate: timestamp(\"delivery_date\"),\n  salespersonId: varchar(\"salesperson_id\").references(() => users.id),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const salesOrderLines = pgTable(\"sales_order_lines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => salesOrders.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  quantity: decimal(\"quantity\", { precision: 15, scale: 2 }).notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 15, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 5, scale: 2 }).default(\"0\"),\n  subtotal: decimal(\"subtotal\", { precision: 15, scale: 2 }).notNull(),\n});\n\n// Purchase Module\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  vendorId: varchar(\"vendor_id\").references(() => partners.id),\n  state: text(\"state\").default(\"draft\"),\n  totalAmount: decimal(\"total_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  currency: varchar(\"currency\", { length: 3 }).default(\"USD\"),\n  orderDate: timestamp(\"order_date\").defaultNow(),\n  receiptDate: timestamp(\"receipt_date\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Events Module\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  venue: text(\"venue\"),\n  capacity: integer(\"capacity\"),\n  registrationDeadline: timestamp(\"registration_deadline\"),\n  status: text(\"status\").default(\"draft\"), // draft, published, confirmed, cancelled\n  organizerId: varchar(\"organizer_id\").references(() => users.id),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const eventRegistrations = pgTable(\"event_registrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id),\n  attendeeName: text(\"attendee_name\").notNull(),\n  attendeeEmail: text(\"attendee_email\").notNull(),\n  registrationDate: timestamp(\"registration_date\").defaultNow(),\n  status: text(\"status\").default(\"confirmed\"), // confirmed, cancelled, attended\n  companyId: varchar(\"company_id\").references(() => companies.id),\n});\n\n// Documents Module\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\"),\n  mimeType: text(\"mime_type\"),\n  folderId: varchar(\"folder_id\"),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  tags: jsonb(\"tags\").default([]),\n  isShared: boolean(\"is_shared\").default(false),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const documentFolders = pgTable(\"document_folders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  parentId: varchar(\"parent_id\"),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Fleet Module\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  model: text(\"model\").notNull(),\n  year: integer(\"year\"),\n  licensePlate: text(\"license_plate\"),\n  vin: text(\"vin\"),\n  driverId: varchar(\"driver_id\").references(() => users.id),\n  status: text(\"status\").default(\"active\"), // active, maintenance, inactive\n  mileage: integer(\"mileage\").default(0),\n  location: text(\"location\"),\n  nextServiceDate: timestamp(\"next_service_date\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const vehicleMaintenance = pgTable(\"vehicle_maintenance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vehicleId: varchar(\"vehicle_id\").references(() => vehicles.id),\n  type: text(\"type\").notNull(), // repair, preventive, inspection\n  description: text(\"description\"),\n  cost: decimal(\"cost\", { precision: 15, scale: 2 }),\n  serviceDate: timestamp(\"service_date\"),\n  nextServiceDate: timestamp(\"next_service_date\"),\n  mechanicId: varchar(\"mechanic_id\").references(() => users.id),\n  status: text(\"status\").default(\"scheduled\"), // scheduled, in_progress, completed\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Approvals Module\nexport const approvalRequests = pgTable(\"approval_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // purchase, time_off, budget, contract\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }),\n  requesterId: varchar(\"requester_id\").references(() => users.id),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected, cancelled\n  priority: text(\"priority\").default(\"medium\"), // low, medium, high, urgent\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const approvalWorkflows = pgTable(\"approval_workflows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requestId: varchar(\"request_id\").references(() => approvalRequests.id),\n  approverId: varchar(\"approver_id\").references(() => users.id),\n  order: integer(\"order\").notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  comments: text(\"comments\"),\n  actionDate: timestamp(\"action_date\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n});\n\n// Equipment Maintenance Module\nexport const equipment = pgTable(\"equipment\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  serialNumber: text(\"serial_number\"),\n  category: text(\"category\"),\n  location: text(\"location\"),\n  status: text(\"status\").default(\"operational\"), // operational, maintenance_needed, out_of_service\n  purchaseDate: timestamp(\"purchase_date\"),\n  warrantyExpiry: timestamp(\"warranty_expiry\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const maintenanceRequests = pgTable(\"maintenance_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  equipmentId: varchar(\"equipment_id\").references(() => equipment.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // repair, preventive, inspection\n  priority: text(\"priority\").default(\"medium\"), // low, medium, high, urgent\n  status: text(\"status\").default(\"pending\"), // pending, in_progress, completed, cancelled\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  requesterId: varchar(\"requester_id\").references(() => users.id),\n  dueDate: timestamp(\"due_date\"),\n  completedDate: timestamp(\"completed_date\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Project Management\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  partnerId: varchar(\"partner_id\").references(() => partners.id),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  state: text(\"state\").default(\"active\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  projectId: varchar(\"project_id\").references(() => projects.id),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  stage: text(\"stage\").default(\"todo\"),\n  priority: text(\"priority\").default(\"normal\"),\n  dueDate: timestamp(\"due_date\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// HR Module\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  employeeId: text(\"employee_id\").unique(),\n  name: text(\"name\").notNull(),\n  jobTitle: text(\"job_title\"),\n  department: text(\"department\"),\n  managerId: varchar(\"manager_id\"),\n  hireDate: timestamp(\"hire_date\"),\n  salary: decimal(\"salary\", { precision: 15, scale: 2 }),\n  currency: varchar(\"currency\", { length: 3 }).default(\"USD\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Accounting Module\nexport const accounts = pgTable(\"accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // asset, liability, equity, income, expense\n  parentId: varchar(\"parent_id\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  reference: text(\"reference\"),\n  state: text(\"state\").default(\"draft\"),\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activities and Calendar\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // meeting, call, email, task\n  summary: text(\"summary\").notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  relatedRecord: text(\"related_record\"), // JSON reference to related record\n  companyId: varchar(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas\nexport const insertCompanySchema = createInsertSchema(companies).omit({ id: true, createdAt: true });\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertLeadSchema = createInsertSchema(leads).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertOpportunitySchema = createInsertSchema(opportunities).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertPartnerSchema = createInsertSchema(partners).omit({ id: true, createdAt: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true, createdAt: true });\nexport const insertSalesOrderSchema = createInsertSchema(salesOrders).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProjectSchema = createInsertSchema(projects).omit({ id: true, createdAt: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, createdAt: true });\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({ id: true, createdAt: true });\nexport const insertAccountSchema = createInsertSchema(accounts).omit({ id: true, createdAt: true });\nexport const insertActivitySchema = createInsertSchema(activities).omit({ id: true, createdAt: true });\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({ id: true, createdAt: true });\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({ id: true, createdAt: true });\nexport const insertEventSchema = createInsertSchema(events).omit({ id: true, createdAt: true });\nexport const insertEventRegistrationSchema = createInsertSchema(eventRegistrations).omit({ id: true });\nexport const insertDocumentSchema = createInsertSchema(documents).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertDocumentFolderSchema = createInsertSchema(documentFolders).omit({ id: true, createdAt: true });\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({ id: true, createdAt: true });\nexport const insertVehicleMaintenanceSchema = createInsertSchema(vehicleMaintenance).omit({ id: true, createdAt: true });\nexport const insertApprovalRequestSchema = createInsertSchema(approvalRequests).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertApprovalWorkflowSchema = createInsertSchema(approvalWorkflows).omit({ id: true });\nexport const insertEquipmentSchema = createInsertSchema(equipment).omit({ id: true, createdAt: true });\nexport const insertMaintenanceRequestSchema = createInsertSchema(maintenanceRequests).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Types\nexport type Company = typeof companies.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type Lead = typeof leads.$inferSelect;\nexport type Opportunity = typeof opportunities.$inferSelect;\nexport type Partner = typeof partners.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type SalesOrder = typeof salesOrders.$inferSelect;\nexport type Project = typeof projects.$inferSelect;\nexport type Task = typeof tasks.$inferSelect;\nexport type Employee = typeof employees.$inferSelect;\nexport type Activity = typeof activities.$inferSelect;\nexport type Account = typeof accounts.$inferSelect;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type Event = typeof events.$inferSelect;\nexport type EventRegistration = typeof eventRegistrations.$inferSelect;\nexport type Document = typeof documents.$inferSelect;\nexport type DocumentFolder = typeof documentFolders.$inferSelect;\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type VehicleMaintenance = typeof vehicleMaintenance.$inferSelect;\nexport type ApprovalRequest = typeof approvalRequests.$inferSelect;\nexport type ApprovalWorkflow = typeof approvalWorkflows.$inferSelect;\nexport type Equipment = typeof equipment.$inferSelect;\nexport type MaintenanceRequest = typeof maintenanceRequests.$inferSelect;\n\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type InsertOpportunity = z.infer<typeof insertOpportunitySchema>;\nexport type InsertPartner = z.infer<typeof insertPartnerSchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertSalesOrder = z.infer<typeof insertSalesOrderSchema>;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type InsertEventRegistration = z.infer<typeof insertEventRegistrationSchema>;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type InsertDocumentFolder = z.infer<typeof insertDocumentFolderSchema>;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type InsertVehicleMaintenance = z.infer<typeof insertVehicleMaintenanceSchema>;\nexport type InsertApprovalRequest = z.infer<typeof insertApprovalRequestSchema>;\nexport type InsertApprovalWorkflow = z.infer<typeof insertApprovalWorkflowSchema>;\nexport type InsertEquipment = z.infer<typeof insertEquipmentSchema>;\nexport type InsertMaintenanceRequest = z.infer<typeof insertMaintenanceRequestSchema>;\n","size_bytes":21701},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Sales from \"@/pages/sales\";\nimport CRM from \"@/pages/crm\";\nimport Inventory from \"@/pages/inventory\";\nimport Accounting from \"@/pages/accounting\";\nimport HR from \"@/pages/hr\";\nimport Project from \"@/pages/project\";\nimport Manufacturing from \"@/pages/manufacturing\";\nimport Purchase from \"@/pages/purchase\";\nimport Website from \"@/pages/website\";\nimport Ecommerce from \"@/pages/ecommerce\";\nimport POS from \"@/pages/pos\";\nimport Marketing from \"@/pages/marketing\";\nimport Events from \"@/pages/events\";\nimport Helpdesk from \"@/pages/helpdesk\";\nimport Documents from \"@/pages/documents\";\nimport Studio from \"@/pages/studio\";\nimport Knowledge from \"@/pages/knowledge\";\nimport Surveys from \"@/pages/surveys\";\nimport Fleet from \"@/pages/fleet\";\nimport Email from \"@/pages/email\";\nimport Social from \"@/pages/social\";\nimport SMS from \"@/pages/sms\";\nimport Approvals from \"@/pages/approvals\";\nimport Maintenance from \"@/pages/maintenance\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <MainLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/sales\" component={Sales} />\n        <Route path=\"/crm\" component={CRM} />\n        <Route path=\"/inventory\" component={Inventory} />\n        <Route path=\"/accounting\" component={Accounting} />\n        <Route path=\"/hr\" component={HR} />\n        <Route path=\"/project\" component={Project} />\n        <Route path=\"/manufacturing\" component={Manufacturing} />\n        <Route path=\"/purchase\" component={Purchase} />\n        <Route path=\"/website\" component={Website} />\n        <Route path=\"/ecommerce\" component={Ecommerce} />\n        <Route path=\"/pos\" component={POS} />\n        <Route path=\"/marketing\" component={Marketing} />\n        <Route path=\"/events\" component={Events} />\n        <Route path=\"/helpdesk\" component={Helpdesk} />\n        <Route path=\"/documents\" component={Documents} />\n        <Route path=\"/studio\" component={Studio} />\n        <Route path=\"/knowledge\" component={Knowledge} />\n        <Route path=\"/surveys\" component={Surveys} />\n        <Route path=\"/fleet\" component={Fleet} />\n        <Route path=\"/email\" component={Email} />\n        <Route path=\"/social\" component={Social} />\n        <Route path=\"/sms\" component={SMS} />\n        <Route path=\"/approvals\" component={Approvals} />\n        <Route path=\"/maintenance\" component={Maintenance} />\n        <Route component={NotFound} />\n      </Switch>\n    </MainLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3051},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(224, 16%, 20%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 16%, 20%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 16%, 20%);\n  --primary: hsl(310, 20%, 35%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(197, 71%, 73%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(210, 16%, 93%);\n  --muted-foreground: hsl(224, 16%, 45%);\n  --accent: hsl(197, 71%, 40%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(310, 20%, 35%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(224, 16%, 20%);\n  --sidebar-primary: hsl(310, 20%, 35%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(210, 16%, 93%);\n  --sidebar-accent-foreground: hsl(310, 20%, 35%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(310, 20%, 35%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 6px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n.sidebar-scrollbar::-webkit-scrollbar {\n  width: 4px;\n}\n\n.sidebar-scrollbar::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.sidebar-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(214, 32%, 91%);\n  border-radius: 2px;\n}\n\n.kanban-card {\n  transition: all 0.2s ease;\n}\n\n.kanban-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n}\n\n.menu-item {\n  transition: all 0.15s ease;\n}\n\n.menu-item:hover {\n  background-color: hsl(210, 16%, 93%);\n  transform: translateX(4px);\n}\n\n.view-tab.active {\n  border-bottom: 2px solid var(--primary);\n  color: var(--primary);\n}\n","size_bytes":4498},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-local-storage.ts":{"content":"import { useState, useEffect, useCallback } from \"react\";\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (value: T | ((val: T) => T)) => void, () => void] {\n  // Get value from localStorage or use initial value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Set value in localStorage and state\n  const setValue = useCallback(\n    (value: T | ((val: T) => T)) => {\n      try {\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        setStoredValue(valueToStore);\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        console.error(`Error setting localStorage key \"${key}\":`, error);\n      }\n    },\n    [key, storedValue]\n  );\n\n  // Remove value from localStorage and reset to initial value\n  const removeValue = useCallback(() => {\n    try {\n      window.localStorage.removeItem(key);\n      setStoredValue(initialValue);\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key, initialValue]);\n\n  // Listen for changes to this localStorage key from other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.error(`Error parsing localStorage key \"${key}\":`, error);\n        }\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, [key]);\n\n  return [storedValue, setValue, removeValue];\n}\n\n// Specialized hooks for common Odoo data types\nexport function useOdooStorage<T>(\n  collection: string,\n  initialValue: T[] = []\n): [T[], (items: T[]) => void, (item: T) => void, (id: string) => void, () => void] {\n  const [items, setItems, clearItems] = useLocalStorage<T[]>(\n    `odoo_${collection}`,\n    initialValue as T[]\n  );\n\n  const addItem = useCallback(\n    (item: T) => {\n      setItems(currentItems => [...currentItems, item]);\n    },\n    [setItems]\n  );\n\n  const removeItem = useCallback(\n    (id: string) => {\n      setItems(currentItems =>\n        currentItems.filter((item: any) => item.id !== id)\n      );\n    },\n    [setItems]\n  );\n\n  return [items, setItems, addItem, removeItem, clearItems];\n}\n\n// Hook for user preferences\nexport function useUserPreferences() {\n  const [preferences, setPreferences] = useLocalStorage(\"odoo_user_preferences\", {\n    theme: \"light\",\n    language: \"en\",\n    dateFormat: \"MM/DD/YYYY\",\n    timeFormat: \"12h\",\n    defaultView: \"list\",\n    itemsPerPage: 20,\n  });\n\n  const updatePreference = useCallback(\n    (key: string, value: any) => {\n      setPreferences(current => ({ ...current, [key]: value }));\n    },\n    [setPreferences]\n  );\n\n  return [preferences, setPreferences, updatePreference] as const;\n}\n\n// Hook for view states (filters, sorting, etc.)\nexport function useViewState(viewId: string) {\n  const [viewStates, setViewStates] = useLocalStorage(\"odoo_view_states\", {});\n\n  const getViewState = useCallback(\n    (defaultState = {}) => {\n      return (viewStates as any)[viewId] || defaultState;\n    },\n    [viewStates, viewId]\n  );\n\n  const setViewState = useCallback(\n    (state: any) => {\n      setViewStates(current => ({\n        ...current,\n        [viewId]: { ...(current as any)[viewId], ...state }\n      }));\n    },\n    [setViewStates, viewId]\n  );\n\n  const clearViewState = useCallback(() => {\n    setViewStates(current => {\n      const updated = { ...current };\n      delete (updated as any)[viewId];\n      return updated;\n    });\n  }, [setViewStates, viewId]);\n\n  return [getViewState, setViewState, clearViewState] as const;\n}\n\n// Hook for managing form drafts\nexport function useFormDraft(formId: string) {\n  const [drafts, setDrafts] = useLocalStorage(\"odoo_form_drafts\", {});\n\n  const getDraft = useCallback(\n    () => (drafts as any)[formId] || null,\n    [drafts, formId]\n  );\n\n  const saveDraft = useCallback(\n    (data: any) => {\n      setDrafts(current => ({\n        ...current,\n        [formId]: { ...data, _savedAt: Date.now() }\n      }));\n    },\n    [setDrafts, formId]\n  );\n\n  const clearDraft = useCallback(() => {\n    setDrafts(current => {\n      const updated = { ...current };\n      delete (updated as any)[formId];\n      return updated;\n    });\n  }, [setDrafts, formId]);\n\n  const hasDraft = useCallback(\n    () => !!(drafts as any)[formId],\n    [drafts, formId]\n  );\n\n  return [getDraft, saveDraft, clearDraft, hasDraft] as const;\n}\n","size_bytes":4849},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"// Odoo module definitions\nexport const ODOO_MODULES = {\n  DASHBOARD: { id: \"dashboard\", name: \"Dashboard\", path: \"/\" },\n  SALES: { id: \"sales\", name: \"Sales\", path: \"/sales\" },\n  CRM: { id: \"crm\", name: \"CRM\", path: \"/crm\" },\n  INVENTORY: { id: \"inventory\", name: \"Inventory\", path: \"/inventory\" },\n  ACCOUNTING: { id: \"accounting\", name: \"Accounting\", path: \"/accounting\" },\n  HR: { id: \"hr\", name: \"Human Resources\", path: \"/hr\" },\n  PROJECT: { id: \"project\", name: \"Project Management\", path: \"/project\" },\n  MANUFACTURING: { id: \"manufacturing\", name: \"Manufacturing\", path: \"/manufacturing\" },\n  PURCHASE: { id: \"purchase\", name: \"Purchase\", path: \"/purchase\" },\n  WEBSITE: { id: \"website\", name: \"Website\", path: \"/website\" },\n  ECOMMERCE: { id: \"ecommerce\", name: \"eCommerce\", path: \"/ecommerce\" },\n  POS: { id: \"pos\", name: \"Point of Sale\", path: \"/pos\" },\n  MARKETING: { id: \"marketing\", name: \"Marketing\", path: \"/marketing\" },\n  EVENTS: { id: \"events\", name: \"Events\", path: \"/events\" },\n  HELPDESK: { id: \"helpdesk\", name: \"Helpdesk\", path: \"/helpdesk\" },\n  KNOWLEDGE: { id: \"knowledge\", name: \"Knowledge\", path: \"/knowledge\" },\n  DOCUMENTS: { id: \"documents\", name: \"Documents\", path: \"/documents\" },\n  SURVEYS: { id: \"surveys\", name: \"Surveys\", path: \"/surveys\" },\n  SOCIAL: { id: \"social\", name: \"Social Marketing\", path: \"/social\" },\n  EMAIL: { id: \"email\", name: \"Email Marketing\", path: \"/email\" },\n  SMS: { id: \"sms\", name: \"SMS Marketing\", path: \"/sms\" },\n  APPROVALS: { id: \"approvals\", name: \"Approvals\", path: \"/approvals\" },\n  FLEET: { id: \"fleet\", name: \"Fleet\", path: \"/fleet\" },\n  MAINTENANCE: { id: \"maintenance\", name: \"Maintenance\", path: \"/maintenance\" },\n  QUALITY: { id: \"quality\", name: \"Quality\", path: \"/quality\" },\n  PLM: { id: \"plm\", name: \"PLM\", path: \"/plm\" },\n  BARCODE: { id: \"barcode\", name: \"Barcode\", path: \"/barcode\" },\n  IOT: { id: \"iot\", name: \"IoT\", path: \"/iot\" },\n  STUDIO: { id: \"studio\", name: \"Studio\", path: \"/studio\" },\n} as const;\n\n// View types\nexport const VIEW_TYPES = {\n  LIST: \"list\",\n  FORM: \"form\",\n  KANBAN: \"kanban\",\n  CALENDAR: \"calendar\",\n  PIVOT: \"pivot\",\n  GRAPH: \"graph\",\n  MAP: \"map\",\n  GANTT: \"gantt\",\n  ACTIVITY: \"activity\",\n} as const;\n\n// Record states\nexport const RECORD_STATES = {\n  DRAFT: \"draft\",\n  SENT: \"sent\",\n  CONFIRMED: \"confirmed\",\n  DONE: \"done\",\n  CANCELLED: \"cancel\",\n} as const;\n\n// CRM stages\nexport const CRM_STAGES = {\n  NEW: \"new\",\n  QUALIFIED: \"qualified\",\n  PROPOSITION: \"proposition\",\n  WON: \"won\",\n  LOST: \"lost\",\n} as const;\n\n// Priority levels\nexport const PRIORITY_LEVELS = {\n  LOW: \"low\",\n  NORMAL: \"normal\",\n  HIGH: \"high\",\n  URGENT: \"urgent\",\n} as const;\n\n// User roles\nexport const USER_ROLES = {\n  ADMIN: \"admin\",\n  USER: \"user\",\n  MANAGER: \"manager\",\n  EMPLOYEE: \"employee\",\n} as const;\n\n// Activity types\nexport const ACTIVITY_TYPES = {\n  CALL: \"call\",\n  MEETING: \"meeting\",\n  EMAIL: \"email\",\n  TASK: \"task\",\n  NOTE: \"note\",\n} as const;\n\n// Currencies\nexport const CURRENCIES = [\n  { code: \"USD\", symbol: \"$\", name: \"US Dollar\" },\n  { code: \"EUR\", symbol: \"â‚¬\", name: \"Euro\" },\n  { code: \"GBP\", symbol: \"Â£\", name: \"British Pound\" },\n  { code: \"JPY\", symbol: \"Â¥\", name: \"Japanese Yen\" },\n  { code: \"CAD\", symbol: \"C$\", name: \"Canadian Dollar\" },\n  { code: \"AUD\", symbol: \"A$\", name: \"Australian Dollar\" },\n] as const;\n\n// Countries\nexport const COUNTRIES = [\n  { code: \"US\", name: \"United States\" },\n  { code: \"CA\", name: \"Canada\" },\n  { code: \"GB\", name: \"United Kingdom\" },\n  { code: \"DE\", name: \"Germany\" },\n  { code: \"FR\", name: \"France\" },\n  { code: \"ES\", name: \"Spain\" },\n  { code: \"IT\", name: \"Italy\" },\n  { code: \"AU\", name: \"Australia\" },\n  { code: \"JP\", name: \"Japan\" },\n] as const;\n\n// Timezones\nexport const TIMEZONES = [\n  \"UTC\",\n  \"America/New_York\",\n  \"America/Chicago\",\n  \"America/Denver\",\n  \"America/Los_Angeles\",\n  \"Europe/London\",\n  \"Europe/Paris\",\n  \"Europe/Berlin\",\n  \"Asia/Tokyo\",\n  \"Asia/Shanghai\",\n  \"Australia/Sydney\",\n] as const;\n\n// Product types\nexport const PRODUCT_TYPES = {\n  STORABLE: \"storable\",\n  CONSUMABLE: \"consumable\",\n  SERVICE: \"service\",\n} as const;\n\n// Default settings\nexport const DEFAULT_SETTINGS = {\n  COMPANY_NAME: \"Demo Company\",\n  CURRENCY: \"USD\",\n  TIMEZONE: \"UTC\",\n  DATE_FORMAT: \"MM/DD/YYYY\",\n  TIME_FORMAT: \"12h\",\n} as const;\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  ODOO_DATA: \"odoo_demo_data\",\n  USER_PREFERENCES: \"odoo_user_preferences\",\n  THEME_SETTINGS: \"odoo_theme_settings\",\n  VIEW_STATES: \"odoo_view_states\",\n} as const;\n\n// API endpoints (for future backend integration)\nexport const API_ENDPOINTS = {\n  OPPORTUNITIES: \"/api/opportunities\",\n  PARTNERS: \"/api/partners\",\n  PRODUCTS: \"/api/products\",\n  SALES_ORDERS: \"/api/sales-orders\",\n  PROJECTS: \"/api/projects\",\n  TASKS: \"/api/tasks\",\n  EMPLOYEES: \"/api/employees\",\n  ACTIVITIES: \"/api/activities\",\n  DASHBOARD_KPIS: \"/api/dashboard/kpis\",\n} as const;\n\n// Form field types\nexport const FIELD_TYPES = {\n  TEXT: \"text\",\n  TEXTAREA: \"textarea\",\n  NUMBER: \"number\",\n  EMAIL: \"email\",\n  PHONE: \"phone\",\n  URL: \"url\",\n  DATE: \"date\",\n  DATETIME: \"datetime\",\n  SELECT: \"select\",\n  MULTISELECT: \"multiselect\",\n  BOOLEAN: \"boolean\",\n  CURRENCY: \"currency\",\n  PERCENTAGE: \"percentage\",\n  MANY2ONE: \"many2one\",\n  ONE2MANY: \"one2many\",\n  MANY2MANY: \"many2many\",\n} as const;\n","size_bytes":5304},"client/src/lib/data-store.ts":{"content":"import { useLocalStorage } from \"@/hooks/use-local-storage\";\n\nexport interface OdooData {\n  opportunities: any[];\n  customers: any[];\n  products: any[];\n  users: any[];\n  companies: any[];\n  activities: any[];\n  projects: any[];\n  tasks: any[];\n  salesOrders: any[];\n  employees: any[];\n  leads: any[];\n  partners: any[];\n}\n\nconst initialData: OdooData = {\n  opportunities: [],\n  customers: [],\n  products: [],\n  users: [],\n  companies: [],\n  activities: [],\n  projects: [],\n  tasks: [],\n  salesOrders: [],\n  employees: [],\n  leads: [],\n  partners: [],\n};\n\nexport class DataStore {\n  private static instance: DataStore;\n  private data: OdooData;\n\n  private constructor() {\n    // Initialize with data from localStorage if available\n    const storedData = localStorage.getItem('odoo_demo_data');\n    this.data = storedData ? JSON.parse(storedData) : initialData;\n  }\n\n  public static getInstance(): DataStore {\n    if (!DataStore.instance) {\n      DataStore.instance = new DataStore();\n    }\n    return DataStore.instance;\n  }\n\n  public getData(): OdooData {\n    return this.data;\n  }\n\n  public setData(data: Partial<OdooData>): void {\n    this.data = { ...this.data, ...data };\n    this.persistData();\n  }\n\n  public addRecord<K extends keyof OdooData>(\n    collection: K, \n    record: OdooData[K] extends Array<infer T> ? T : never\n  ): void {\n    (this.data[collection] as any[]).push(record);\n    this.persistData();\n  }\n\n  public updateRecord<K extends keyof OdooData>(\n    collection: K,\n    id: string,\n    updates: Partial<OdooData[K] extends Array<infer T> ? T : never>\n  ): void {\n    const records = this.data[collection] as any[];\n    const index = records.findIndex(record => record.id === id);\n    \n    if (index !== -1) {\n      records[index] = { ...records[index], ...updates };\n      this.persistData();\n    }\n  }\n\n  public removeRecord<K extends keyof OdooData>(collection: K, id: string): void {\n    const records = this.data[collection] as any[];\n    const filteredRecords = records.filter(record => record.id !== id);\n    (this.data[collection] as any) = filteredRecords;\n    this.persistData();\n  }\n\n  public getRecords<K extends keyof OdooData>(collection: K): OdooData[K] {\n    return this.data[collection];\n  }\n\n  public getRecord<K extends keyof OdooData>(\n    collection: K, \n    id: string\n  ): (OdooData[K] extends Array<infer T> ? T : never) | undefined {\n    const records = this.data[collection] as any[];\n    return records.find(record => record.id === id);\n  }\n\n  private persistData(): void {\n    try {\n      localStorage.setItem('odoo_demo_data', JSON.stringify(this.data));\n    } catch (error) {\n      console.error('Failed to persist data to localStorage:', error);\n    }\n  }\n\n  public clearAllData(): void {\n    this.data = initialData;\n    localStorage.removeItem('odoo_demo_data');\n  }\n\n  public exportData(): string {\n    return JSON.stringify(this.data, null, 2);\n  }\n\n  public importData(jsonData: string): boolean {\n    try {\n      const parsedData = JSON.parse(jsonData);\n      this.data = { ...initialData, ...parsedData };\n      this.persistData();\n      return true;\n    } catch (error) {\n      console.error('Failed to import data:', error);\n      return false;\n    }\n  }\n}\n\n// Singleton instance\nexport const dataStore = DataStore.getInstance();\n\n// React hook for easier integration\nexport function useDataStore() {\n  return {\n    dataStore,\n    getData: () => dataStore.getData(),\n    setData: (data: Partial<OdooData>) => dataStore.setData(data),\n    addRecord: <K extends keyof OdooData>(\n      collection: K, \n      record: OdooData[K] extends Array<infer T> ? T : never\n    ) => dataStore.addRecord(collection, record),\n    updateRecord: <K extends keyof OdooData>(\n      collection: K,\n      id: string,\n      updates: Partial<OdooData[K] extends Array<infer T> ? T : never>\n    ) => dataStore.updateRecord(collection, id, updates),\n    removeRecord: <K extends keyof OdooData>(collection: K, id: string) => dataStore.removeRecord(collection, id),\n    getRecords: <K extends keyof OdooData>(collection: K) => dataStore.getRecords(collection),\n    getRecord: <K extends keyof OdooData>(collection: K, id: string) => dataStore.getRecord(collection, id),\n  };\n}\n","size_bytes":4215},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/accounting.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, TrendingUp, DollarSign, FileText, CreditCard } from \"lucide-react\";\n\nexport default function Accounting() {\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"accounting-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"accounting-title\">\n            Accounting\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your financial records and reporting</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-bank-reconciliation\">\n            <CreditCard className=\"w-4 h-4 mr-2\" />\n            Bank Reconciliation\n          </Button>\n          <Button data-testid=\"button-create-journal-entry\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Journal Entry\n          </Button>\n        </div>\n      </div>\n\n      {/* Financial Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Revenue</p>\n                <p className=\"text-2xl font-bold\">$142,350</p>\n                <p className=\"text-sm text-green-600\">+12.5%</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Expenses</p>\n                <p className=\"text-2xl font-bold\">$89,240</p>\n                <p className=\"text-sm text-red-600\">+8.2%</p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Net Profit</p>\n                <p className=\"text-2xl font-bold\">$53,110</p>\n                <p className=\"text-sm text-green-600\">+15.8%</p>\n              </div>\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-green-600\">ðŸ’°</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Cash Flow</p>\n                <p className=\"text-2xl font-bold\">$78,450</p>\n                <p className=\"text-sm text-blue-600\">Positive</p>\n              </div>\n              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-blue-600\">ðŸ’§</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Transactions */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Transactions</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-transactions\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { id: 1, description: \"Customer Payment - ABC Corp\", amount: \"+$5,000\", type: \"income\", date: \"Today\" },\n                { id: 2, description: \"Office Supplies\", amount: \"-$250\", type: \"expense\", date: \"Yesterday\" },\n                { id: 3, description: \"Software License\", amount: \"-$1,200\", type: \"expense\", date: \"2 days ago\" },\n                { id: 4, description: \"Consulting Revenue\", amount: \"+$3,500\", type: \"income\", date: \"3 days ago\" },\n                { id: 5, description: \"Rent Payment\", amount: \"-$2,800\", type: \"expense\", date: \"1 week ago\" },\n              ].map((transaction) => (\n                <div\n                  key={transaction.id}\n                  className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                  data-testid={`transaction-${transaction.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      transaction.type === \"income\" ? \"bg-green-100\" : \"bg-red-100\"\n                    }`}>\n                      {transaction.type === \"income\" ? \"â†—\" : \"â†™\"}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-sm\">{transaction.description}</p>\n                      <p className=\"text-xs text-muted-foreground\">{transaction.date}</p>\n                    </div>\n                  </div>\n                  <p className={`font-medium ${\n                    transaction.type === \"income\" ? \"text-green-600\" : \"text-red-600\"\n                  }`}>\n                    {transaction.amount}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Outstanding Items */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Outstanding Items</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-manage-outstanding\">\n                Manage\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Accounts Receivable */}\n              <div>\n                <h4 className=\"font-medium text-sm mb-3 text-green-600\">Accounts Receivable</h4>\n                <div className=\"space-y-2\">\n                  {[\n                    { customer: \"ABC Corporation\", amount: \"$12,500\", due: \"15 days\", overdue: false },\n                    { customer: \"XYZ Limited\", amount: \"$8,750\", due: \"5 days\", overdue: false },\n                    { customer: \"TechStart Inc\", amount: \"$4,200\", due: \"Overdue 3 days\", overdue: true },\n                  ].map((item, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-muted rounded\"\n                      data-testid={`receivable-${index}`}\n                    >\n                      <div>\n                        <p className=\"text-sm font-medium\">{item.customer}</p>\n                        <p className={`text-xs ${item.overdue ? \"text-red-600\" : \"text-muted-foreground\"}`}>\n                          {item.due}\n                        </p>\n                      </div>\n                      <p className=\"font-medium text-sm\">{item.amount}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Accounts Payable */}\n              <div>\n                <h4 className=\"font-medium text-sm mb-3 text-red-600\">Accounts Payable</h4>\n                <div className=\"space-y-2\">\n                  {[\n                    { vendor: \"Office Supplies Co\", amount: \"$1,250\", due: \"20 days\", overdue: false },\n                    { vendor: \"Software Provider\", amount: \"$2,400\", due: \"10 days\", overdue: false },\n                    { vendor: \"Utilities Company\", amount: \"$680\", due: \"Overdue 1 day\", overdue: true },\n                  ].map((item, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-muted rounded\"\n                      data-testid={`payable-${index}`}\n                    >\n                      <div>\n                        <p className=\"text-sm font-medium\">{item.vendor}</p>\n                        <p className={`text-xs ${item.overdue ? \"text-red-600\" : \"text-muted-foreground\"}`}>\n                          {item.due}\n                        </p>\n                      </div>\n                      <p className=\"font-medium text-sm\">{item.amount}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Reports Section */}\n      <div className=\"mt-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Financial Reports</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {[\n                { name: \"Profit & Loss\", description: \"Income and expenses overview\", icon: TrendingUp },\n                { name: \"Balance Sheet\", description: \"Assets, liabilities & equity\", icon: FileText },\n                { name: \"Cash Flow\", description: \"Cash inflows and outflows\", icon: DollarSign },\n              ].map((report, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                  data-testid={`report-${report.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <report.icon className=\"w-5 h-5 text-primary\" />\n                    <h4 className=\"font-medium\">{report.name}</h4>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{report.description}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10190},"client/src/pages/crm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ViewTabs from \"@/components/common/view-tabs\";\nimport { Plus, Search, Filter, Users, TrendingUp } from \"lucide-react\";\n\nexport default function CRM() {\n  const [view, setView] = useState(\"kanban\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: opportunities = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/opportunities\"],\n  });\n\n  const { data: partners = [] } = useQuery<any[]>({\n    queryKey: [\"/api/partners\"],\n  });\n\n  const filteredOpportunities = opportunities.filter((opp: any) =>\n    opp.name?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const stages = [\"new\", \"qualified\", \"proposition\", \"won\"];\n  const stageNames = {\n    new: \"New\",\n    qualified: \"Qualified\",\n    proposition: \"Proposition\",\n    won: \"Won\"\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"crm-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"crm-title\">\n            CRM\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your customer relationships and opportunities</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-create-lead\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            New Lead\n          </Button>\n          <Button data-testid=\"button-create-opportunity\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Opportunity\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Opportunities</p>\n                <p className=\"text-2xl font-bold\">{(opportunities as any[]).length}</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Customers</p>\n                <p className=\"text-2xl font-bold\">{(partners as any[]).filter((p: any) => p.isCustomer).length}</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Won This Month</p>\n                <p className=\"text-2xl font-bold\">{(opportunities as any[]).filter((o: any) => o.stage === \"won\").length}</p>\n              </div>\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-green-600\">âœ“</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Conversion Rate</p>\n                <p className=\"text-2xl font-bold\">78%</p>\n              </div>\n              <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-orange-600\">%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search opportunities...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-opportunities\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter-crm\">\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Filter\n        </Button>\n        <ViewTabs activeView={view} onViewChange={setView} />\n      </div>\n\n      {/* Kanban Board */}\n      {view === \"kanban\" && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {stages.map((stage) => {\n            const stageOpportunities = filteredOpportunities.filter((opp: any) => opp.stage === stage);\n            return (\n              <Card key={stage} className=\"bg-muted\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      {stageNames[stage as keyof typeof stageNames]}\n                    </CardTitle>\n                    <Badge variant=\"secondary\">{stageOpportunities.length}</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {stageOpportunities.map((opportunity: any) => (\n                    <div\n                      key={opportunity.id}\n                      className=\"kanban-card bg-card p-3 rounded-md border border-border cursor-pointer\"\n                      data-testid={`opportunity-card-${opportunity.id}`}\n                    >\n                      <h4 className=\"font-medium text-sm mb-2\">{opportunity.name}</h4>\n                      <p className=\"text-xs text-muted-foreground mb-2\">{opportunity.partner}</p>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium text-green-600\">\n                          ${opportunity.expectedRevenue?.toLocaleString() || '0'}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {opportunity.probability}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                  {stageOpportunities.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground text-sm\">\n                      No opportunities\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {/* List View */}\n      {view === \"list\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Opportunities</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center h-48\">\n                <div className=\"text-muted-foreground\">Loading opportunities...</div>\n              </div>\n            ) : filteredOpportunities.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-muted-foreground mb-2\">No opportunities found</div>\n                <Button data-testid=\"button-create-first-opportunity\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create your first opportunity\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredOpportunities.map((opportunity: any) => (\n                  <div\n                    key={opportunity.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                    data-testid={`opportunity-item-${opportunity.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <h3 className=\"font-medium\">{opportunity.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{opportunity.partner}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">${opportunity.expectedRevenue?.toLocaleString() || '0'}</p>\n                        <p className=\"text-sm text-muted-foreground\">{opportunity.probability}% probability</p>\n                      </div>\n                      <Badge variant={opportunity.stage === \"won\" ? \"default\" : \"secondary\"}>\n                        {opportunity.stage}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9239},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport KPICard from \"@/components/dashboard/kpi-card\";\nimport KanbanBoard from \"@/components/dashboard/kanban-board\";\nimport ActivityFeed from \"@/components/dashboard/activity-feed\";\nimport RevenueChart from \"@/components/dashboard/revenue-chart\";\nimport TopProducts from \"@/components/dashboard/top-products\";\nimport TodoList from \"@/components/dashboard/todo-list\";\nimport CalendarEvents from \"@/components/dashboard/calendar-events\";\n\nexport default function Dashboard() {\n  const { data: kpis, isLoading: kpisLoading } = useQuery<any>({\n    queryKey: [\"/api/dashboard/kpis\"],\n  });\n\n  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/opportunities\"],\n  });\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"dashboard-content\">\n      {/* Dashboard Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"dashboard-title\">\n          My Dashboard\n        </h1>\n        <p className=\"text-muted-foreground\" data-testid=\"dashboard-subtitle\">\n          Welcome back! Here's what's happening in your business.\n        </p>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <KPICard\n          title=\"Total Revenue\"\n          value={`$${(kpis as any)?.revenue?.toLocaleString() || '0'}`}\n          change=\"+12.5% from last month\"\n          changeType=\"positive\"\n          icon=\"fas fa-dollar-sign\"\n          color=\"green\"\n          loading={kpisLoading}\n          data-testid=\"kpi-revenue\"\n        />\n        <KPICard\n          title=\"New Customers\"\n          value={(kpis as any)?.customers?.toString() || '0'}\n          change=\"+8.2% from last month\"\n          changeType=\"positive\"\n          icon=\"fas fa-users\"\n          color=\"blue\"\n          loading={kpisLoading}\n          data-testid=\"kpi-customers\"\n        />\n        <KPICard\n          title=\"Open Opportunities\"\n          value={(kpis as any)?.opportunities?.toString() || '0'}\n          change=\"+5.1% from last month\"\n          changeType=\"positive\"\n          icon=\"fas fa-chart-line\"\n          color=\"orange\"\n          loading={kpisLoading}\n          data-testid=\"kpi-opportunities\"\n        />\n        <KPICard\n          title=\"Inventory Value\"\n          value={`$${(kpis as any)?.inventory?.toLocaleString() || '0'}`}\n          change=\"-2.1% from last month\"\n          changeType=\"negative\"\n          icon=\"fas fa-boxes\"\n          color=\"red\"\n          loading={kpisLoading}\n          data-testid=\"kpi-inventory\"\n        />\n      </div>\n\n      {/* Main Dashboard Grid */}\n      <div className=\"grid grid-cols-12 gap-6\">\n        {/* Sales Pipeline */}\n        <div className=\"col-span-12 lg:col-span-8\">\n          <KanbanBoard \n            opportunities={opportunities}\n            loading={opportunitiesLoading}\n            data-testid=\"sales-pipeline\"\n          />\n        </div>\n\n        {/* Recent Activities */}\n        <div className=\"col-span-12 lg:col-span-4\">\n          <ActivityFeed data-testid=\"activity-feed\" />\n        </div>\n\n        {/* Revenue Chart */}\n        <div className=\"col-span-12 lg:col-span-6\">\n          <RevenueChart data-testid=\"revenue-chart\" />\n        </div>\n\n        {/* Top Products */}\n        <div className=\"col-span-12 lg:col-span-6\">\n          <TopProducts data-testid=\"top-products\" />\n        </div>\n\n        {/* To-Do & Calendar */}\n        <div className=\"col-span-12\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <TodoList data-testid=\"todo-list\" />\n            <CalendarEvents data-testid=\"calendar-events\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3778},"client/src/pages/hr.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Users, Calendar, DollarSign, Clock } from \"lucide-react\";\n\nexport default function HR() {\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"hr-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"hr-title\">\n            Human Resources\n          </h1>\n          <p className=\"text-muted-foreground\">Manage employees, attendance, and payroll</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-timesheet\">\n            <Clock className=\"w-4 h-4 mr-2\" />\n            Timesheet\n          </Button>\n          <Button data-testid=\"button-new-employee\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Employee\n          </Button>\n        </div>\n      </div>\n\n      {/* HR Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Employees</p>\n                <p className=\"text-2xl font-bold\">47</p>\n                <p className=\"text-sm text-green-600\">+3 this month</p>\n              </div>\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">On Leave Today</p>\n                <p className=\"text-2xl font-bold\">5</p>\n                <p className=\"text-sm text-muted-foreground\">10.6% of staff</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Monthly Payroll</p>\n                <p className=\"text-2xl font-bold\">$285K</p>\n                <p className=\"text-sm text-blue-600\">Processing</p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Open Positions</p>\n                <p className=\"text-2xl font-bold\">8</p>\n                <p className=\"text-sm text-muted-foreground\">Recruiting</p>\n              </div>\n              <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-purple-600\">ðŸ“‹</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Employee Directory */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Employee Directory</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-employees\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { name: \"John Doe\", position: \"Software Engineer\", department: \"IT\", status: \"Active\" },\n                { name: \"Jane Smith\", position: \"Marketing Manager\", department: \"Marketing\", status: \"Active\" },\n                { name: \"Mike Johnson\", position: \"Sales Representative\", department: \"Sales\", status: \"On Leave\" },\n                { name: \"Sarah Wilson\", position: \"HR Specialist\", department: \"Human Resources\", status: \"Active\" },\n                { name: \"David Brown\", position: \"Accountant\", department: \"Finance\", status: \"Active\" },\n              ].map((employee, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                  data-testid={`employee-${index}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-primary\">\n                        {employee.name.split(' ').map(n => n[0]).join('')}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-sm\">{employee.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{employee.position} â€¢ {employee.department}</p>\n                    </div>\n                  </div>\n                  <Badge variant={employee.status === \"Active\" ? \"default\" : \"secondary\"}>\n                    {employee.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activities */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent HR Activities</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-hr-reports\">\n                Reports\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { type: \"hire\", description: \"New employee onboarding - Alex Chen\", time: \"2 hours ago\", icon: \"ðŸ‘‹\" },\n                { type: \"leave\", description: \"Leave request approved - Mike Johnson\", time: \"4 hours ago\", icon: \"ðŸ“…\" },\n                { type: \"promotion\", description: \"Promotion processed - Jane Smith\", time: \"1 day ago\", icon: \"ðŸŽ‰\" },\n                { type: \"training\", description: \"Training completed - Team Security Workshop\", time: \"2 days ago\", icon: \"ðŸŽ“\" },\n                { type: \"payroll\", description: \"Payroll processed for November\", time: \"3 days ago\", icon: \"ðŸ’°\" },\n              ].map((activity, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-start space-x-3 p-3 bg-muted rounded-lg\"\n                  data-testid={`hr-activity-${index}`}\n                >\n                  <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-sm\">{activity.icon}</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{activity.description}</p>\n                    <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Attendance Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Today's Attendance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-green-800\">Present</p>\n                  <p className=\"text-2xl font-bold text-green-900\">42</p>\n                </div>\n                <div className=\"text-green-600\">\n                  <Users className=\"w-8 h-8\" />\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-orange-800\">On Leave</p>\n                  <p className=\"text-2xl font-bold text-orange-900\">5</p>\n                </div>\n                <div className=\"text-orange-600\">\n                  <Calendar className=\"w-8 h-8\" />\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-red-50 border border-red-200 rounded-lg\">\n                <div>\n                  <p className=\"text-sm font-medium text-red-800\">Late</p>\n                  <p className=\"text-2xl font-bold text-red-900\">2</p>\n                </div>\n                <div className=\"text-red-600\">\n                  <Clock className=\"w-8 h-8\" />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming HR Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { event: \"Team Building Workshop\", date: \"Nov 20\", time: \"2:00 PM\", attendees: 25 },\n                { event: \"Performance Reviews\", date: \"Nov 25\", time: \"All Day\", attendees: 47 },\n                { event: \"New Employee Orientation\", date: \"Dec 1\", time: \"9:00 AM\", attendees: 3 },\n                { event: \"Holiday Party Planning\", date: \"Dec 5\", time: \"3:00 PM\", attendees: 8 },\n              ].map((event, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                  data-testid={`hr-event-${index}`}\n                >\n                  <div>\n                    <p className=\"font-medium text-sm\">{event.event}</p>\n                    <p className=\"text-xs text-muted-foreground\">{event.date} â€¢ {event.time}</p>\n                  </div>\n                  <Badge variant=\"outline\">{event.attendees} people</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10442},"client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ViewTabs from \"@/components/common/view-tabs\";\nimport { Plus, Search, Filter, Package, AlertTriangle, Truck } from \"lucide-react\";\n\nexport default function Inventory() {\n  const [view, setView] = useState(\"list\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: products = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const filteredProducts = products.filter((product: any) =>\n    product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    product.internalReference?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"inventory-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"inventory-title\">\n            Inventory\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your products and stock levels</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-inventory-adjustment\">\n            <Truck className=\"w-4 h-4 mr-2\" />\n            Receive Products\n          </Button>\n          <Button data-testid=\"button-create-product\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Product\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Products</p>\n                <p className=\"text-2xl font-bold\">{(products as any[]).length}</p>\n              </div>\n              <Package className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Low Stock Items</p>\n                <p className=\"text-2xl font-bold\">12</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Inventory Value</p>\n                <p className=\"text-2xl font-bold\">$45.2K</p>\n              </div>\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-green-600\">$</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Out of Stock</p>\n                <p className=\"text-2xl font-bold\">3</p>\n              </div>\n              <div className=\"w-8 h-8 bg-red-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-red-600\">!</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search products...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-products\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter-inventory\">\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Filter\n        </Button>\n        <ViewTabs activeView={view} onViewChange={setView} />\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Products</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-48\">\n              <div className=\"text-muted-foreground\">Loading products...</div>\n            </div>\n          ) : filteredProducts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-muted-foreground mb-2\">No products found</div>\n              <Button data-testid=\"button-create-first-product\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create your first product\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredProducts.map((product: any) => (\n                <div\n                  key={product.id}\n                  className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                  data-testid={`product-item-${product.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Package className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">{product.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {product.internalReference} â€¢ {product.category}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">${product.salePrice}</p>\n                      <p className=\"text-sm text-muted-foreground\">Cost: ${product.cost}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">150</p>\n                      <p className=\"text-sm text-muted-foreground\">On Hand</p>\n                    </div>\n                    <Badge variant={product.active ? \"default\" : \"secondary\"}>\n                      {product.active ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7019},"client/src/pages/manufacturing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Settings, Factory, Package, AlertTriangle, TrendingUp } from \"lucide-react\";\n\nexport default function Manufacturing() {\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"manufacturing-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"manufacturing-title\">\n            Manufacturing\n          </h1>\n          <p className=\"text-muted-foreground\">Manage production orders, work orders, and manufacturing operations</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-work-order\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            Work Order\n          </Button>\n          <Button data-testid=\"button-production-order\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Production Order\n          </Button>\n        </div>\n      </div>\n\n      {/* Manufacturing Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Production Orders</p>\n                <p className=\"text-2xl font-bold\">23</p>\n                <p className=\"text-sm text-green-600\">18 in progress</p>\n              </div>\n              <Factory className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Manufactured Today</p>\n                <p className=\"text-2xl font-bold\">156</p>\n                <p className=\"text-sm text-blue-600\">Units completed</p>\n              </div>\n              <Package className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Efficiency Rate</p>\n                <p className=\"text-2xl font-bold\">94%</p>\n                <p className=\"text-sm text-green-600\">+2% from yesterday</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Quality Issues</p>\n                <p className=\"text-2xl font-bold\">3</p>\n                <p className=\"text-sm text-orange-600\">Needs attention</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Active Production Orders */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Active Production Orders</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-orders\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { id: \"MO001\", product: \"Widget A\", quantity: 500, completed: 350, status: \"In Progress\", priority: \"High\" },\n                { id: \"MO002\", product: \"Component B\", quantity: 200, completed: 200, status: \"Done\", priority: \"Normal\" },\n                { id: \"MO003\", product: \"Assembly C\", quantity: 100, completed: 45, status: \"In Progress\", priority: \"High\" },\n                { id: \"MO004\", product: \"Widget D\", quantity: 300, completed: 0, status: \"Ready\", priority: \"Low\" },\n                { id: \"MO005\", product: \"Part E\", quantity: 150, completed: 75, status: \"In Progress\", priority: \"Normal\" },\n              ].map((order, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                  data-testid={`production-order-${index}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Factory className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-sm\">{order.id} - {order.product}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {order.completed}/{order.quantity} units â€¢ {Math.round((order.completed / order.quantity) * 100)}% complete\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={order.priority === \"High\" ? \"destructive\" : order.priority === \"Normal\" ? \"default\" : \"secondary\"}>\n                      {order.priority}\n                    </Badge>\n                    <Badge variant={order.status === \"Done\" ? \"default\" : order.status === \"In Progress\" ? \"secondary\" : \"outline\"}>\n                      {order.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Work Centers Status */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Work Centers</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-manage-workcenters\">\n                Manage\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { name: \"Assembly Line 1\", status: \"Running\", efficiency: 96, currentOrder: \"MO001\" },\n                { name: \"CNC Machine 1\", status: \"Running\", efficiency: 89, currentOrder: \"MO003\" },\n                { name: \"Quality Control\", status: \"Idle\", efficiency: 100, currentOrder: null },\n                { name: \"Packaging Station\", status: \"Running\", efficiency: 92, currentOrder: \"MO002\" },\n                { name: \"Assembly Line 2\", status: \"Maintenance\", efficiency: 0, currentOrder: null },\n              ].map((center, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                  data-testid={`work-center-${index}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-3 h-3 rounded-full ${\n                      center.status === \"Running\" ? \"bg-green-500\" : \n                      center.status === \"Idle\" ? \"bg-yellow-500\" : \"bg-red-500\"\n                    }`} />\n                    <div>\n                      <p className=\"font-medium text-sm\">{center.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {center.currentOrder ? `Working on ${center.currentOrder}` : center.status}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium\">{center.efficiency}%</p>\n                    <p className=\"text-xs text-muted-foreground\">Efficiency</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Material Requirements */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Material Requirements</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { material: \"Steel Plate 5mm\", required: 50, available: 45, unit: \"pcs\", status: \"shortage\" },\n                { material: \"Bolts M6x20\", required: 1000, available: 1500, unit: \"pcs\", status: \"sufficient\" },\n                { material: \"Electronic Component A\", required: 200, available: 180, unit: \"pcs\", status: \"low\" },\n                { material: \"Packaging Box\", required: 100, available: 250, unit: \"pcs\", status: \"sufficient\" },\n                { material: \"Label Stickers\", required: 500, available: 50, unit: \"pcs\", status: \"shortage\" },\n              ].map((material, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                  data-testid={`material-${index}`}\n                >\n                  <div>\n                    <p className=\"font-medium text-sm\">{material.material}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Required: {material.required} {material.unit} â€¢ Available: {material.available} {material.unit}\n                    </p>\n                  </div>\n                  <Badge variant={\n                    material.status === \"shortage\" ? \"destructive\" : \n                    material.status === \"low\" ? \"secondary\" : \"default\"\n                  }>\n                    {material.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Production Analytics */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Production Analytics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Daily Production Chart */}\n              <div>\n                <h4 className=\"font-medium text-sm mb-3\">Daily Production (Last 7 Days)</h4>\n                <div className=\"h-32 flex items-end justify-between space-x-2\">\n                  {[120, 135, 142, 118, 156, 149, 163].map((value, index) => (\n                    <div key={index} className=\"flex flex-col items-center space-y-2\">\n                      <div \n                        className=\"w-8 bg-primary rounded-t-md\"\n                        style={{ height: `${(value / 200) * 100}%` }}\n                      />\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(Date.now() - (6 - index) * 24 * 60 * 60 * 1000).toLocaleDateString('en', { weekday: 'short' })}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Avg. Lead Time</p>\n                  <p className=\"text-lg font-bold\">3.2 days</p>\n                </div>\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">On-Time Delivery</p>\n                  <p className=\"text-lg font-bold\">94.5%</p>\n                </div>\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Scrap Rate</p>\n                  <p className=\"text-lg font-bold\">2.1%</p>\n                </div>\n                <div className=\"p-3 bg-muted rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Cost per Unit</p>\n                  <p className=\"text-lg font-bold\">$12.45</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12200},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ViewTabs from \"@/components/common/view-tabs\";\nimport { Plus, Search, Filter, FolderOpen, Users, Calendar, CheckCircle } from \"lucide-react\";\n\nexport default function Project() {\n  const [view, setView] = useState(\"kanban\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const filteredProjects = projects.filter((project: any) =>\n    project.name?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const tasksByStage = {\n    todo: (tasks as any[]).filter((task: any) => task.stage === \"todo\"),\n    doing: (tasks as any[]).filter((task: any) => task.stage === \"doing\"),\n    done: (tasks as any[]).filter((task: any) => task.stage === \"done\"),\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"project-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"project-title\">\n            Project Management\n          </h1>\n          <p className=\"text-muted-foreground\">Plan, track, and manage your projects and tasks</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-create-task\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Task\n          </Button>\n          <Button data-testid=\"button-create-project\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Project\n          </Button>\n        </div>\n      </div>\n\n      {/* Project Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Projects</p>\n                <p className=\"text-2xl font-bold\">{(projects as any[]).filter((p: any) => p.state === \"active\").length}</p>\n                <p className=\"text-sm text-green-600\">On Track</p>\n              </div>\n              <FolderOpen className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Tasks</p>\n                <p className=\"text-2xl font-bold\">{(tasks as any[]).length}</p>\n                <p className=\"text-sm text-blue-600\">Across all projects</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Team Members</p>\n                <p className=\"text-2xl font-bold\">28</p>\n                <p className=\"text-sm text-purple-600\">Available</p>\n              </div>\n              <Users className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Deadlines This Week</p>\n                <p className=\"text-2xl font-bold\">7</p>\n                <p className=\"text-sm text-orange-600\">Upcoming</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search projects...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-projects\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter-projects\">\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Filter\n        </Button>\n        <ViewTabs activeView={view} onViewChange={setView} />\n      </div>\n\n      {/* Kanban View - Task Board */}\n      {view === \"kanban\" && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {Object.entries(tasksByStage).map(([stage, stageTasks]) => (\n            <Card key={stage} className=\"bg-muted\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-sm font-medium capitalize\">\n                    {stage === \"todo\" ? \"To Do\" : stage === \"doing\" ? \"In Progress\" : \"Done\"}\n                  </CardTitle>\n                  <Badge variant=\"secondary\">{stageTasks.length}</Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {stageTasks.map((task: any) => (\n                  <div\n                    key={task.id}\n                    className=\"kanban-card bg-card p-3 rounded-md border border-border cursor-pointer\"\n                    data-testid={`task-card-${task.id}`}\n                  >\n                    <h4 className=\"font-medium text-sm mb-2\">{task.name}</h4>\n                    <p className=\"text-xs text-muted-foreground mb-2\">{task.project}</p>\n                    <div className=\"flex justify-between items-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {task.priority || \"Normal\"}\n                      </Badge>\n                      {task.dueDate && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          Due: {new Date(task.dueDate).toLocaleDateString()}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n                {stageTasks.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground text-sm\">\n                    No tasks\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* List View - Projects */}\n      {view === \"list\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Projects</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {projectsLoading ? (\n              <div className=\"flex items-center justify-center h-48\">\n                <div className=\"text-muted-foreground\">Loading projects...</div>\n              </div>\n            ) : filteredProjects.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-muted-foreground mb-2\">No projects found</div>\n                <Button data-testid=\"button-create-first-project\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create your first project\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredProjects.map((project: any) => (\n                  <div\n                    key={project.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                    data-testid={`project-item-${project.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <FolderOpen className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">{project.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{project.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">\n                          {(tasks as any[]).filter((t: any) => t.projectId === project.id).length} tasks\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {project.startDate ? `Started: ${new Date(project.startDate).toLocaleDateString()}` : \"Not started\"}\n                        </p>\n                      </div>\n                      <Badge variant={project.state === \"active\" ? \"default\" : \"secondary\"}>\n                        {project.state}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Calendar View */}\n      {view === \"calendar\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Project Timeline</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-12\">\n              <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <div className=\"text-muted-foreground mb-2\">Calendar view coming soon</div>\n              <p className=\"text-sm text-muted-foreground\">\n                Visual timeline for project milestones and deadlines\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":10208},"client/src/pages/sales.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ViewTabs from \"@/components/common/view-tabs\";\nimport { Plus, Search, Filter } from \"lucide-react\";\n\nexport default function Sales() {\n  const [view, setView] = useState(\"list\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: salesOrders = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/sales-orders\"],\n  });\n\n  const filteredOrders = salesOrders.filter((order: any) =>\n    order.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.partner?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"sales-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"sales-title\">\n            Sales\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your sales orders and quotations</p>\n        </div>\n        <Button data-testid=\"button-create-order\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create\n        </Button>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex items-center space-x-4 mb-6\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search sales orders...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-orders\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter\">\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Filter\n        </Button>\n        <ViewTabs activeView={view} onViewChange={setView} />\n      </div>\n\n      {/* Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Sales Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-48\">\n              <div className=\"text-muted-foreground\">Loading sales orders...</div>\n            </div>\n          ) : filteredOrders.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-muted-foreground mb-2\">No sales orders found</div>\n              <Button data-testid=\"button-create-first-order\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create your first sales order\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredOrders.map((order: any) => (\n                <div\n                  key={order.id}\n                  className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                  data-testid={`order-item-${order.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <h3 className=\"font-medium\">{order.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{order.partner}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">${order.totalAmount}</p>\n                      <p className=\"text-sm text-muted-foreground\">{order.currency}</p>\n                    </div>\n                    <Badge variant={order.state === \"confirmed\" ? \"default\" : \"secondary\"}>\n                      {order.state}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4155},"client/src/types/index.ts":{"content":"// Base entity interface\nexport interface BaseEntity {\n  id: string;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\n// User and Company types\nexport interface User extends BaseEntity {\n  username: string;\n  email: string;\n  name: string;\n  companyId?: string;\n  isActive: boolean;\n  roles: string[];\n  settings: Record<string, any>;\n}\n\nexport interface Company extends BaseEntity {\n  name: string;\n  currency: string;\n  country?: string;\n  timezone: string;\n  settings: Record<string, any>;\n}\n\n// CRM types\nexport interface Lead extends BaseEntity {\n  name: string;\n  email?: string;\n  phone?: string;\n  company?: string;\n  source?: string;\n  stage: string;\n  probability: number;\n  expectedRevenue?: number;\n  description?: string;\n  assignedTo?: string;\n  companyId?: string;\n}\n\nexport interface Opportunity extends BaseEntity {\n  name: string;\n  partnerId?: string;\n  stage: string;\n  probability: number;\n  expectedRevenue?: number;\n  closeDate?: Date;\n  assignedTo?: string;\n  companyId?: string;\n  description?: string;\n}\n\n// Partner (Customer/Vendor) types\nexport interface Partner extends BaseEntity {\n  name: string;\n  email?: string;\n  phone?: string;\n  website?: string;\n  isCustomer: boolean;\n  isVendor: boolean;\n  street?: string;\n  city?: string;\n  state?: string;\n  zip?: string;\n  country?: string;\n  vatNumber?: string;\n  companyId?: string;\n}\n\n// Product and Inventory types\nexport interface Product extends BaseEntity {\n  name: string;\n  internalReference?: string;\n  barcode?: string;\n  salePrice?: number;\n  cost?: number;\n  category?: string;\n  type: \"storable\" | \"consumable\" | \"service\";\n  description?: string;\n  active: boolean;\n  companyId?: string;\n}\n\nexport interface InventoryItem {\n  id: string;\n  productId: string;\n  location: string;\n  quantityOnHand: number;\n  quantityReserved: number;\n  quantityAvailable: number;\n  companyId?: string;\n  updatedAt: Date;\n}\n\n// Sales types\nexport interface SalesOrder extends BaseEntity {\n  name: string;\n  partnerId?: string;\n  state: \"draft\" | \"sent\" | \"confirmed\" | \"done\" | \"cancel\";\n  totalAmount: number;\n  currency: string;\n  orderDate: Date;\n  deliveryDate?: Date;\n  salespersonId?: string;\n  companyId?: string;\n  lines: SalesOrderLine[];\n}\n\nexport interface SalesOrderLine {\n  id: string;\n  orderId: string;\n  productId: string;\n  quantity: number;\n  unitPrice: number;\n  discount: number;\n  subtotal: number;\n}\n\n// Project Management types\nexport interface Project extends BaseEntity {\n  name: string;\n  description?: string;\n  partnerId?: string;\n  managerId?: string;\n  startDate?: Date;\n  endDate?: Date;\n  state: \"active\" | \"closed\" | \"cancelled\";\n  companyId?: string;\n}\n\nexport interface Task extends BaseEntity {\n  name: string;\n  description?: string;\n  projectId?: string;\n  assignedTo?: string;\n  stage: \"todo\" | \"doing\" | \"done\";\n  priority: \"low\" | \"normal\" | \"high\" | \"urgent\";\n  dueDate?: Date;\n  companyId?: string;\n}\n\n// HR types\nexport interface Employee extends BaseEntity {\n  userId?: string;\n  employeeId?: string;\n  name: string;\n  jobTitle?: string;\n  department?: string;\n  managerId?: string;\n  hireDate?: Date;\n  salary?: number;\n  currency: string;\n  companyId?: string;\n}\n\n// Activity and Calendar types\nexport interface Activity extends BaseEntity {\n  type: \"meeting\" | \"call\" | \"email\" | \"task\" | \"note\";\n  summary: string;\n  description?: string;\n  startDate?: Date;\n  endDate?: Date;\n  assignedTo?: string;\n  relatedRecord?: string; // JSON reference to related record\n  companyId?: string;\n}\n\n// Accounting types\nexport interface Account extends BaseEntity {\n  code: string;\n  name: string;\n  type: \"asset\" | \"liability\" | \"equity\" | \"income\" | \"expense\";\n  parentId?: string;\n  companyId?: string;\n}\n\nexport interface JournalEntry extends BaseEntity {\n  name: string;\n  date: Date;\n  reference?: string;\n  state: \"draft\" | \"posted\";\n  companyId?: string;\n  lines: JournalEntryLine[];\n}\n\nexport interface JournalEntryLine {\n  id: string;\n  entryId: string;\n  accountId: string;\n  debit: number;\n  credit: number;\n  description?: string;\n}\n\n// UI and View types\nexport interface ViewState {\n  currentView: \"list\" | \"form\" | \"kanban\" | \"calendar\" | \"pivot\" | \"graph\";\n  filters: Record<string, any>;\n  sorting: { field: string; direction: \"asc\" | \"desc\" }[];\n  groupBy: string[];\n  searchTerm: string;\n  selectedIds: string[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n}\n\nexport interface FormField {\n  name: string;\n  label: string;\n  type: string;\n  required: boolean;\n  readonly: boolean;\n  options?: Array<{ value: string; label: string }>;\n  placeholder?: string;\n  help?: string;\n  validation?: Record<string, any>;\n}\n\nexport interface MenuItem {\n  id: string;\n  name: string;\n  icon?: string;\n  path: string;\n  children?: MenuItem[];\n  badge?: string | number;\n}\n\n// Search and Filter types\nexport interface SearchFilter {\n  field: string;\n  operator: \"=\" | \"!=\" | \">\" | \"<\" | \">=\" | \"<=\" | \"like\" | \"ilike\" | \"in\" | \"not in\";\n  value: any;\n  display?: string;\n}\n\nexport interface SearchDomain {\n  filters: SearchFilter[];\n  operator: \"AND\" | \"OR\";\n}\n\n// Dashboard types\nexport interface KPI {\n  id: string;\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\";\n  color?: string;\n  icon?: string;\n}\n\nexport interface ChartData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    backgroundColor?: string[];\n    borderColor?: string[];\n  }>;\n}\n\n// Notification types\nexport interface Notification {\n  id: string;\n  type: \"info\" | \"success\" | \"warning\" | \"error\";\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n}\n\n// Settings and Preferences types\nexport interface UserPreferences {\n  theme: \"light\" | \"dark\";\n  language: string;\n  dateFormat: string;\n  timeFormat: \"12h\" | \"24h\";\n  defaultView: string;\n  itemsPerPage: number;\n  notifications: {\n    email: boolean;\n    browser: boolean;\n    sound: boolean;\n  };\n}\n\nexport interface CompanySettings {\n  name: string;\n  logo?: string;\n  currency: string;\n  dateFormat: string;\n  timeFormat: string;\n  timezone: string;\n  fiscalYearEnd: string;\n  multiCurrency: boolean;\n  multiCompany: boolean;\n}\n\n// API Response types\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n  errors?: string[];\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\n// Error types\nexport interface AppError {\n  code: string;\n  message: string;\n  details?: Record<string, any>;\n  timestamp: Date;\n}\n\n// Utility types\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n","size_bytes":6915},"client/src/components/common/view-tabs.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { LayoutGrid, List, BarChart3, Calendar } from \"lucide-react\";\n\ninterface ViewTabsProps {\n  activeView: string;\n  onViewChange: (view: string) => void;\n  views?: Array<{\n    id: string;\n    label: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }>;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nconst defaultViews = [\n  { id: \"kanban\", label: \"Kanban\", icon: LayoutGrid },\n  { id: \"list\", label: \"List\", icon: List },\n  { id: \"calendar\", label: \"Calendar\", icon: Calendar },\n  { id: \"graph\", label: \"Graph\", icon: BarChart3 },\n];\n\nexport default function ViewTabs({ \n  activeView, \n  onViewChange, \n  views = defaultViews.slice(0, 3), // Default to first 3 views\n  className,\n  \"data-testid\": testId \n}: ViewTabsProps) {\n  return (\n    <div className={cn(\"flex space-x-1\", className)} data-testid={testId}>\n      {views.map((view) => {\n        const Icon = view.icon;\n        const isActive = activeView === view.id;\n        \n        return (\n          <Button\n            key={view.id}\n            variant={isActive ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            onClick={() => onViewChange(view.id)}\n            className={cn(\n              \"view-tab px-3 py-1 text-sm rounded-md transition-colors\",\n              isActive && \"active\"\n            )}\n            data-testid={`button-view-${view.id}`}\n          >\n            {Icon && <Icon className=\"w-4 h-4 mr-1\" />}\n            {view.label}\n          </Button>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1578},"client/src/components/dashboard/activity-feed.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserPlus, CheckCircle, AlertTriangle, Calendar, FileText } from \"lucide-react\";\n\nconst mockActivities = [\n  {\n    id: 1,\n    type: \"customer\",\n    description: \"New customer \\\"Acme Corp\\\" added to CRM\",\n    time: \"2 hours ago\",\n    icon: UserPlus,\n    iconBg: \"bg-primary\",\n    iconColor: \"text-primary-foreground\"\n  },\n  {\n    id: 2,\n    type: \"sale\",\n    description: \"Quote #SO001234 confirmed and converted to sale\",\n    time: \"4 hours ago\",\n    icon: CheckCircle,\n    iconBg: \"bg-green-600\",\n    iconColor: \"text-white\"\n  },\n  {\n    id: 3,\n    type: \"inventory\",\n    description: \"Low stock alert: Widget A quantity below minimum\",\n    time: \"6 hours ago\",\n    icon: AlertTriangle,\n    iconBg: \"bg-orange-500\",\n    iconColor: \"text-white\"\n  },\n  {\n    id: 4,\n    type: \"meeting\",\n    description: \"Meeting scheduled with XYZ Corp for tomorrow 2PM\",\n    time: \"1 day ago\",\n    icon: Calendar,\n    iconBg: \"bg-blue-600\",\n    iconColor: \"text-white\"\n  },\n  {\n    id: 5,\n    type: \"invoice\",\n    description: \"Invoice #INV001456 sent to customer\",\n    time: \"2 days ago\",\n    icon: FileText,\n    iconBg: \"bg-purple-600\",\n    iconColor: \"text-white\"\n  }\n];\n\ninterface ActivityFeedProps {\n  \"data-testid\"?: string;\n}\n\nexport default function ActivityFeed({ \"data-testid\": testId }: ActivityFeedProps) {\n  return (\n    <Card data-testid={testId}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Recent Activities</CardTitle>\n          <Button \n            variant=\"link\" \n            className=\"text-primary text-sm hover:underline p-0\"\n            data-testid=\"button-view-all-activities\"\n          >\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {mockActivities.map((activity) => {\n            const Icon = activity.icon;\n            \n            return (\n              <div \n                key={activity.id}\n                className=\"flex items-start space-x-3\"\n                data-testid={`activity-item-${activity.id}`}\n              >\n                <div className={`w-8 h-8 ${activity.iconBg} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  <Icon className={`w-4 h-4 ${activity.iconColor}`} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\" data-testid={`activity-description-${activity.id}`}>\n                    {activity.description}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`activity-time-${activity.id}`}>\n                    {activity.time}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2984},"client/src/components/dashboard/calendar-events.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst upcomingEvents = [\n  {\n    id: 1,\n    title: \"Client Meeting - XYZ Corp\",\n    day: 15,\n    month: \"Nov\",\n    time: \"2:00 PM - 3:00 PM\",\n    location: \"Conference Room A\",\n    borderColor: \"border-l-primary\",\n    attendees: 4\n  },\n  {\n    id: 2,\n    title: \"Team Standup\",\n    day: 16,\n    month: \"Nov\",\n    time: \"9:00 AM - 9:30 AM\",\n    location: \"Virtual Meeting\",\n    borderColor: \"border-l-green-500\",\n    attendees: 8\n  },\n  {\n    id: 3,\n    title: \"Product Demo - New Features\",\n    day: 18,\n    month: \"Nov\",\n    time: \"11:00 AM - 12:00 PM\",\n    location: \"Main Auditorium\",\n    borderColor: \"border-l-orange-500\",\n    attendees: 25\n  },\n  {\n    id: 4,\n    title: \"Quarterly Review\",\n    day: 20,\n    month: \"Nov\",\n    time: \"3:00 PM - 5:00 PM\",\n    location: \"Board Room\",\n    borderColor: \"border-l-blue-500\",\n    attendees: 12\n  }\n];\n\ninterface CalendarEventsProps {\n  \"data-testid\"?: string;\n}\n\nexport default function CalendarEvents({ \"data-testid\": testId }: CalendarEventsProps) {\n  const [currentMonth, setCurrentMonth] = useState(\"November 2024\");\n\n  const navigateMonth = (direction: \"prev\" | \"next\") => {\n    // Simple month navigation for demo\n    const months = [\"November 2024\", \"December 2024\", \"January 2025\"];\n    const currentIndex = months.indexOf(currentMonth);\n    \n    if (direction === \"prev\" && currentIndex > 0) {\n      setCurrentMonth(months[currentIndex - 1]);\n    } else if (direction === \"next\" && currentIndex < months.length - 1) {\n      setCurrentMonth(months[currentIndex + 1]);\n    }\n  };\n\n  return (\n    <Card data-testid={testId}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Upcoming Events</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => navigateMonth(\"prev\")}\n              data-testid=\"button-prev-month\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"text-sm px-3 py-1\" data-testid=\"current-month\">\n              {currentMonth}\n            </span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => navigateMonth(\"next\")}\n              data-testid=\"button-next-month\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3\">\n          {upcomingEvents.map((event) => (\n            <div \n              key={event.id}\n              className={`flex items-center space-x-3 p-3 border-l-4 ${event.borderColor} bg-muted rounded-r-lg hover:bg-muted/70 cursor-pointer`}\n              data-testid={`event-item-${event.id}`}\n            >\n              <div className=\"text-center flex-shrink-0\">\n                <p className=\"text-lg font-bold text-primary\" data-testid={`event-day-${event.id}`}>\n                  {event.day}\n                </p>\n                <p className=\"text-xs text-muted-foreground\" data-testid={`event-month-${event.id}`}>\n                  {event.month}\n                </p>\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-sm\" data-testid={`event-title-${event.id}`}>\n                  {event.title}\n                </p>\n                <p className=\"text-xs text-muted-foreground\" data-testid={`event-time-${event.id}`}>\n                  {event.time}\n                </p>\n                <p className=\"text-xs text-muted-foreground\" data-testid={`event-location-${event.id}`}>\n                  {event.location}\n                </p>\n              </div>\n              <Badge variant=\"outline\" data-testid={`event-attendees-${event.id}`}>\n                {event.attendees} people\n              </Badge>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4275},"client/src/components/dashboard/kanban-board.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Opportunity {\n  id: string;\n  name: string;\n  partnerId?: string;\n  stage: string;\n  probability: number;\n  expectedRevenue?: string;\n}\n\ninterface KanbanBoardProps {\n  opportunities: Opportunity[];\n  loading?: boolean;\n  \"data-testid\"?: string;\n}\n\nconst stageConfig = {\n  new: { name: \"New\", color: \"bg-primary text-primary-foreground\" },\n  qualified: { name: \"Qualified\", color: \"bg-primary text-primary-foreground\" },\n  proposition: { name: \"Proposition\", color: \"bg-primary text-primary-foreground\" },\n  won: { name: \"Won\", color: \"bg-green-600 text-white\" }\n};\n\nconst mockOpportunities: Opportunity[] = [\n  {\n    id: \"1\",\n    name: \"ABC Corp - Cloud Migration\",\n    partnerId: \"ABC Corporation\",\n    stage: \"new\",\n    probability: 80,\n    expectedRevenue: \"45000\"\n  },\n  {\n    id: \"2\",\n    name: \"XYZ Ltd - ERP Implementation\",\n    partnerId: \"XYZ Limited\",\n    stage: \"new\",\n    probability: 60,\n    expectedRevenue: \"78500\"\n  },\n  {\n    id: \"3\",\n    name: \"TechStart - Software Licensing\",\n    partnerId: \"TechStart Inc\",\n    stage: \"qualified\",\n    probability: 90,\n    expectedRevenue: \"23750\"\n  },\n  {\n    id: \"4\",\n    name: \"GlobalTech - Consulting\",\n    partnerId: \"GlobalTech Solutions\",\n    stage: \"proposition\",\n    probability: 70,\n    expectedRevenue: \"156000\"\n  },\n  {\n    id: \"5\",\n    name: \"MegaCorp - Platform Upgrade\",\n    partnerId: \"MegaCorp Industries\",\n    stage: \"won\",\n    probability: 100,\n    expectedRevenue: \"89250\"\n  }\n];\n\nexport default function KanbanBoard({ opportunities, loading = false, \"data-testid\": testId }: KanbanBoardProps) {\n  const [activeView, setActiveView] = useState(\"kanban\");\n  \n  // Use mock data if no opportunities provided (for demo purposes)\n  const displayOpportunities = opportunities.length > 0 ? opportunities : mockOpportunities;\n  \n  const stages = Object.keys(stageConfig) as Array<keyof typeof stageConfig>;\n\n  if (loading) {\n    return (\n      <Card data-testid={testId}>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-32\" />\n            <div className=\"flex space-x-2\">\n              <Skeleton className=\"h-8 w-16\" />\n              <Skeleton className=\"h-8 w-16\" />\n              <Skeleton className=\"h-8 w-16\" />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {stages.map((stage) => (\n              <div key={stage} className=\"bg-muted rounded-lg p-4\">\n                <Skeleton className=\"h-6 w-20 mb-4\" />\n                <div className=\"space-y-3\">\n                  <Skeleton className=\"h-20 w-full\" />\n                  <Skeleton className=\"h-20 w-full\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid={testId}>\n      <CardHeader className=\"pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Sales Pipeline</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant={activeView === \"kanban\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveView(\"kanban\")}\n              className={cn(\n                \"view-tab px-3 py-1 text-sm rounded-md\",\n                activeView === \"kanban\" && \"active\"\n              )}\n              data-testid=\"button-kanban-view\"\n            >\n              Kanban\n            </Button>\n            <Button\n              variant={activeView === \"list\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveView(\"list\")}\n              className=\"view-tab px-3 py-1 text-sm rounded-md text-muted-foreground\"\n              data-testid=\"button-list-view\"\n            >\n              List\n            </Button>\n            <Button\n              variant={activeView === \"graph\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveView(\"graph\")}\n              className=\"view-tab px-3 py-1 text-sm rounded-md text-muted-foreground\"\n              data-testid=\"button-graph-view\"\n            >\n              Graph\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {stages.map((stage) => {\n            const stageOpportunities = displayOpportunities.filter(opp => opp.stage === stage);\n            const stageInfo = stageConfig[stage];\n            \n            return (\n              <div key={stage} className=\"bg-muted rounded-lg p-4\" data-testid={`kanban-stage-${stage}`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium text-sm\">{stageInfo.name}</h3>\n                  <Badge className={stageInfo.color}>\n                    {stageOpportunities.length}\n                  </Badge>\n                </div>\n                <div className=\"space-y-3\">\n                  {stageOpportunities.map((opportunity) => (\n                    <div\n                      key={opportunity.id}\n                      className=\"kanban-card bg-card p-3 rounded-md border border-border cursor-pointer\"\n                      data-testid={`opportunity-card-${opportunity.id}`}\n                    >\n                      <h4 className=\"font-medium text-sm mb-2\">{opportunity.name}</h4>\n                      <p className=\"text-xs text-muted-foreground mb-2\">{opportunity.partnerId}</p>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium text-green-600\">\n                          ${Number(opportunity.expectedRevenue || 0).toLocaleString()}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {opportunity.probability}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                  {stageOpportunities.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground text-sm\">\n                      No opportunities\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6728},"client/src/components/dashboard/kpi-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from \"@/lib/utils\";\n\ninterface KPICardProps {\n  title: string;\n  value: string;\n  change: string;\n  changeType: \"positive\" | \"negative\";\n  icon: string;\n  color: \"green\" | \"blue\" | \"orange\" | \"red\" | \"purple\";\n  loading?: boolean;\n  \"data-testid\"?: string;\n}\n\nconst colorConfig = {\n  green: {\n    iconBg: \"bg-green-100\",\n    iconText: \"text-green-600\",\n    changeText: \"text-green-600\"\n  },\n  blue: {\n    iconBg: \"bg-blue-100\",\n    iconText: \"text-blue-600\",\n    changeText: \"text-blue-600\"\n  },\n  orange: {\n    iconBg: \"bg-orange-100\",\n    iconText: \"text-orange-600\",\n    changeText: \"text-orange-600\"\n  },\n  red: {\n    iconBg: \"bg-red-100\",\n    iconText: \"text-red-600\",\n    changeText: \"text-red-600\"\n  },\n  purple: {\n    iconBg: \"bg-purple-100\",\n    iconText: \"text-purple-600\",\n    changeText: \"text-purple-600\"\n  }\n};\n\nexport default function KPICard({ \n  title, \n  value, \n  change, \n  changeType, \n  icon, \n  color, \n  loading = false,\n  \"data-testid\": testId\n}: KPICardProps) {\n  const config = colorConfig[color];\n  \n  if (loading) {\n    return (\n      <Card data-testid={testId}>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-24\" />\n              <Skeleton className=\"h-8 w-20\" />\n              <Skeleton className=\"h-3 w-32\" />\n            </div>\n            <Skeleton className=\"h-12 w-12 rounded-lg\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`${testId}-title`}>\n              {title}\n            </p>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid={`${testId}-value`}>\n              {value}\n            </p>\n            <p className={cn(\n              \"text-sm mt-1\",\n              changeType === \"positive\" ? \"text-green-600\" : \"text-red-600\"\n            )} data-testid={`${testId}-change`}>\n              {change}\n            </p>\n          </div>\n          <div className={cn(\"w-12 h-12 rounded-lg flex items-center justify-center\", config.iconBg)}>\n            <i className={cn(icon, \"text-xl\", config.iconText)} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2546},"client/src/components/dashboard/revenue-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\n\nconst revenueData = [\n  { month: \"Jan\", value: 32, height: 32 },\n  { month: \"Feb\", value: 40, height: 40 },\n  { month: \"Mar\", value: 36, height: 36 },\n  { month: \"Apr\", value: 48, height: 48 },\n  { month: \"May\", value: 44, height: 44 },\n  { month: \"Jun\", value: 52, height: 52 }\n];\n\ninterface RevenueChartProps {\n  \"data-testid\"?: string;\n}\n\nexport default function RevenueChart({ \"data-testid\": testId }: RevenueChartProps) {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"6months\");\n\n  return (\n    <Card data-testid={testId}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Revenue Trend</CardTitle>\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-revenue-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"6months\">Last 6 months</SelectItem>\n              <SelectItem value=\"year\">Last year</SelectItem>\n              <SelectItem value=\"2years\">Last 2 years</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Simple Chart Representation */}\n        <div className=\"h-64 flex items-end justify-between space-x-2\" data-testid=\"revenue-chart-bars\">\n          {revenueData.map((data, index) => (\n            <div \n              key={index}\n              className=\"flex flex-col items-center space-y-2\"\n              data-testid={`chart-bar-${data.month.toLowerCase()}`}\n            >\n              <div \n                className=\"w-8 bg-primary rounded-t-md transition-all hover:bg-primary/80\"\n                style={{ height: `${data.height * 2}px` }}\n                title={`${data.month}: $${data.value}K`}\n              />\n              <span className=\"text-xs text-muted-foreground\">{data.month}</span>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2269},"client/src/components/dashboard/todo-list.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\nconst initialTodos = [\n  {\n    id: 1,\n    task: \"Follow up with ABC Corp on proposal\",\n    due: \"Today 5:00 PM\",\n    priority: \"High\",\n    completed: false\n  },\n  {\n    id: 2,\n    task: \"Review inventory levels for Q4\",\n    due: \"Tomorrow 2:00 PM\",\n    priority: \"Medium\",\n    completed: false\n  },\n  {\n    id: 3,\n    task: \"Send quarterly report to stakeholders\",\n    due: \"Completed: Yesterday\",\n    priority: \"Done\",\n    completed: true\n  },\n  {\n    id: 4,\n    task: \"Prepare for board meeting presentation\",\n    due: \"Friday 10:00 AM\",\n    priority: \"Normal\",\n    completed: false\n  }\n];\n\nconst priorityConfig = {\n  High: { variant: \"destructive\" as const, color: \"bg-red-100 text-red-600\" },\n  Medium: { variant: \"secondary\" as const, color: \"bg-orange-100 text-orange-600\" },\n  Normal: { variant: \"outline\" as const, color: \"bg-blue-100 text-blue-600\" },\n  Done: { variant: \"default\" as const, color: \"bg-green-100 text-green-600\" }\n};\n\ninterface TodoListProps {\n  \"data-testid\"?: string;\n}\n\nexport default function TodoList({ \"data-testid\": testId }: TodoListProps) {\n  const [todos, setTodos] = useState(initialTodos);\n\n  const handleToggleTodo = (id: number) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  return (\n    <Card data-testid={testId}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">My To-Do</CardTitle>\n          <Button \n            variant=\"link\" \n            className=\"text-primary text-sm hover:underline p-0\"\n            data-testid=\"button-add-task\"\n          >\n            Add Task\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3\">\n          {todos.map((todo) => {\n            const priorityStyle = priorityConfig[todo.priority as keyof typeof priorityConfig];\n            \n            return (\n              <div \n                key={todo.id}\n                className={`flex items-center space-x-3 p-3 bg-muted rounded-lg ${\n                  todo.completed ? 'opacity-75' : ''\n                }`}\n                data-testid={`todo-item-${todo.id}`}\n              >\n                <Checkbox\n                  checked={todo.completed}\n                  onCheckedChange={() => handleToggleTodo(todo.id)}\n                  className=\"data-[state=checked]:bg-primary data-[state=checked]:border-primary\"\n                  data-testid={`checkbox-todo-${todo.id}`}\n                />\n                <div className=\"flex-1\">\n                  <p \n                    className={`text-sm ${todo.completed ? 'line-through' : ''}`}\n                    data-testid={`todo-task-${todo.id}`}\n                  >\n                    {todo.task}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`todo-due-${todo.id}`}>\n                    {todo.due}\n                  </p>\n                </div>\n                <Badge \n                  variant={priorityStyle.variant}\n                  data-testid={`todo-priority-${todo.id}`}\n                >\n                  {todo.priority}\n                </Badge>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3576},"client/src/components/dashboard/top-products.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Package, Laptop, Settings, GraduationCap } from \"lucide-react\";\n\nconst topProducts = [\n  {\n    id: 1,\n    name: \"Professional Services\",\n    category: \"Services\",\n    revenue: 45200,\n    growth: \"+15%\",\n    icon: Package,\n    color: \"bg-primary\"\n  },\n  {\n    id: 2,\n    name: \"Software Licenses\",\n    category: \"Products\",\n    revenue: 38750,\n    growth: \"+8%\",\n    icon: Laptop,\n    color: \"bg-secondary\"\n  },\n  {\n    id: 3,\n    name: \"Hardware Components\",\n    category: \"Products\",\n    revenue: 29180,\n    growth: \"-3%\",\n    icon: Settings,\n    color: \"bg-accent\"\n  },\n  {\n    id: 4,\n    name: \"Training & Support\",\n    category: \"Services\",\n    revenue: 22340,\n    growth: \"+12%\",\n    icon: GraduationCap,\n    color: \"bg-orange-500\"\n  }\n];\n\ninterface TopProductsProps {\n  \"data-testid\"?: string;\n}\n\nexport default function TopProducts({ \"data-testid\": testId }: TopProductsProps) {\n  return (\n    <Card data-testid={testId}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Top Products</CardTitle>\n          <Button \n            variant=\"link\" \n            className=\"text-primary text-sm hover:underline p-0\"\n            data-testid=\"button-view-report\"\n          >\n            View Report\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {topProducts.map((product) => {\n            const Icon = product.icon;\n            const isPositiveGrowth = product.growth.startsWith('+');\n            \n            return (\n              <div \n                key={product.id}\n                className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/70 cursor-pointer\"\n                data-testid={`product-item-${product.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 ${product.color} rounded-lg flex items-center justify-center`}>\n                    <Icon className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\" data-testid={`product-name-${product.id}`}>\n                      {product.name}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\" data-testid={`product-category-${product.id}`}>\n                      {product.category}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium text-sm\" data-testid={`product-revenue-${product.id}`}>\n                    ${product.revenue.toLocaleString()}\n                  </p>\n                  <p \n                    className={`text-xs ${isPositiveGrowth ? 'text-green-600' : 'text-red-600'}`}\n                    data-testid={`product-growth-${product.id}`}\n                  >\n                    {product.growth}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3254},"client/src/components/layout/main-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport TopBar from \"./top-bar\";\n\ninterface MainLayoutProps {\n  children: ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  return (\n    <div className=\"flex h-screen overflow-hidden\" data-testid=\"main-layout\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <TopBar />\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":460},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Gauge, ChartLine, Users, Package, Calculator, Bus, \n  FolderOpen, Factory, ShoppingCart, Globe, Store, \n  ScanBarcode, Megaphone, Calendar, LifeBuoy, Book, \n  FileText, BarChart3, Share2, Mail, MessageSquare, \n  CheckCircle, Car, Wrench, Award, Settings, Barcode, \n  Wifi, Palette, Box\n} from \"lucide-react\";\n\nconst modules = [\n  { id: \"dashboard\", name: \"Dashboard\", icon: Gauge, path: \"/\" },\n  { id: \"sales\", name: \"Sales\", icon: ChartLine, path: \"/sales\" },\n  { id: \"crm\", name: \"CRM\", icon: Users, path: \"/crm\" },\n  { id: \"inventory\", name: \"Inventory\", icon: Package, path: \"/inventory\" },\n  { id: \"accounting\", name: \"Accounting\", icon: Calculator, path: \"/accounting\" },\n  { id: \"hr\", name: \"HR\", icon: Bus, path: \"/hr\" },\n  { id: \"project\", name: \"Project\", icon: FolderOpen, path: \"/project\" },\n  { id: \"manufacturing\", name: \"Manufacturing\", icon: Factory, path: \"/manufacturing\" },\n  { id: \"purchase\", name: \"Purchase\", icon: ShoppingCart, path: \"/purchase\" },\n  { id: \"website\", name: \"Website\", icon: Globe, path: \"/website\" },\n  { id: \"ecommerce\", name: \"eCommerce\", icon: Store, path: \"/ecommerce\" },\n  { id: \"pos\", name: \"Point of Sale\", icon: ScanBarcode, path: \"/pos\" },\n  { id: \"marketing\", name: \"Marketing\", icon: Megaphone, path: \"/marketing\" },\n  { id: \"events\", name: \"Events\", icon: Calendar, path: \"/events\" },\n  { id: \"helpdesk\", name: \"Helpdesk\", icon: LifeBuoy, path: \"/helpdesk\" },\n  { id: \"knowledge\", name: \"Knowledge\", icon: Book, path: \"/knowledge\" },\n  { id: \"documents\", name: \"Documents\", icon: FileText, path: \"/documents\" },\n  { id: \"surveys\", name: \"Surveys\", icon: BarChart3, path: \"/surveys\" },\n  { id: \"social\", name: \"Social Marketing\", icon: Share2, path: \"/social\" },\n  { id: \"email\", name: \"Email Marketing\", icon: Mail, path: \"/email\" },\n  { id: \"sms\", name: \"SMS Marketing\", icon: MessageSquare, path: \"/sms\" },\n  { id: \"approvals\", name: \"Approvals\", icon: CheckCircle, path: \"/approvals\" },\n  { id: \"fleet\", name: \"Fleet\", icon: Car, path: \"/fleet\" },\n  { id: \"maintenance\", name: \"Maintenance\", icon: Wrench, path: \"/maintenance\" },\n  { id: \"quality\", name: \"Quality\", icon: Award, path: \"/quality\" },\n  { id: \"plm\", name: \"PLM\", icon: Settings, path: \"/plm\" },\n  { id: \"barcode\", name: \"Barcode\", icon: Barcode, path: \"/barcode\" },\n  { id: \"iot\", name: \"IoT\", icon: Wifi, path: \"/iot\" },\n  { id: \"studio\", name: \"Studio\", icon: Palette, path: \"/studio\" },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"w-60 bg-card border-r border-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Sidebar Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Box className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-lg\" data-testid=\"app-title\">Odoo</h1>\n            <p className=\"text-xs text-muted-foreground\">v17.0 Enterprise</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Apps Menu */}\n      <div className=\"flex-1 overflow-y-auto sidebar-scrollbar\">\n        <div className=\"p-2 space-y-1\">\n          {modules.map((module) => {\n            const Icon = module.icon;\n            const isActive = location === module.path;\n            \n            return (\n              <Link key={module.id} href={module.path}>\n                <div\n                  className={cn(\n                    \"menu-item p-2 rounded-md cursor-pointer\",\n                    isActive\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"hover:bg-muted\"\n                  )}\n                  data-testid={`menu-item-${module.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Icon className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-medium\">{module.name}</span>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 cursor-pointer hover:bg-muted rounded-md p-2\" data-testid=\"user-profile\">\n          <div className=\"w-8 h-8 rounded-full bg-primary flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-primary-foreground\">JD</span>\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium\">John Doe</p>\n            <p className=\"text-xs text-muted-foreground\">Demo Company</p>\n          </div>\n          <div className=\"w-4 h-4 text-muted-foreground\">\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5123},"client/src/components/layout/top-bar.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Bell, MessageCircle, Settings } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst breadcrumbMap: Record<string, string> = {\n  \"/\": \"Dashboard\",\n  \"/sales\": \"Sales\",\n  \"/crm\": \"CRM\",\n  \"/inventory\": \"Inventory\",\n  \"/accounting\": \"Accounting\",\n  \"/hr\": \"Human Resources\",\n  \"/project\": \"Project Management\",\n  \"/manufacturing\": \"Manufacturing\",\n  \"/purchase\": \"Purchase\",\n  \"/website\": \"Website\",\n  \"/ecommerce\": \"eCommerce\",\n  \"/pos\": \"Point of Sale\",\n  \"/marketing\": \"Marketing\",\n  \"/events\": \"Events\",\n  \"/helpdesk\": \"Helpdesk\",\n  \"/knowledge\": \"Knowledge\",\n  \"/documents\": \"Documents\",\n  \"/surveys\": \"Surveys\",\n  \"/social\": \"Social Marketing\",\n  \"/email\": \"Email Marketing\",\n  \"/sms\": \"SMS Marketing\",\n  \"/approvals\": \"Approvals\",\n  \"/fleet\": \"Fleet\",\n  \"/maintenance\": \"Maintenance\",\n  \"/quality\": \"Quality\",\n  \"/plm\": \"PLM\",\n  \"/barcode\": \"Barcode\",\n  \"/iot\": \"IoT\",\n  \"/studio\": \"Studio\",\n};\n\nexport default function TopBar() {\n  const [location] = useLocation();\n  const currentPage = breadcrumbMap[location] || \"Dashboard\";\n\n  return (\n    <div className=\"h-14 bg-card border-b border-border flex items-center justify-between px-6\" data-testid=\"top-bar\">\n      <div className=\"flex items-center space-x-4\">\n        <nav className=\"flex space-x-1 text-sm text-muted-foreground\">\n          <span data-testid=\"breadcrumb-current\">{currentPage}</span>\n        </nav>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search...\"\n            className=\"w-64 pl-10 pr-4 py-2 text-sm\"\n            data-testid=\"input-global-search\"\n          />\n        </div>\n\n        {/* Notifications */}\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"relative p-2\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"w-4 h-4\" />\n          <Badge \n            variant=\"destructive\" \n            className=\"absolute -top-1 -right-1 h-5 w-5 text-xs flex items-center justify-center p-0\"\n          >\n            3\n          </Badge>\n        </Button>\n\n        {/* Messages */}\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"p-2\"\n          data-testid=\"button-messages\"\n        >\n          <MessageCircle className=\"w-4 h-4\" />\n        </Button>\n\n        {/* Settings */}\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"p-2\"\n          data-testid=\"button-settings\"\n        >\n          <Settings className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2929},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/approvals.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Clock, XCircle, FileText, Users, AlertTriangle } from \"lucide-react\";\n\nexport default function Approvals() {\n  const requests = [\n    { id: \"AR001\", title: \"Equipment Purchase Request\", type: \"Purchase\", requester: \"John Smith\", amount: \"$2,500\", status: \"pending\", submitted: \"2024-01-15\", priority: \"medium\" },\n    { id: \"AR002\", title: \"Vacation Request\", type: \"Time Off\", requester: \"Sarah Wilson\", amount: \"5 days\", status: \"approved\", submitted: \"2024-01-14\", priority: \"low\" },\n    { id: \"AR003\", title: \"Budget Increase\", type: \"Budget\", requester: \"Mike Johnson\", amount: \"$15,000\", status: \"rejected\", submitted: \"2024-01-13\", priority: \"high\" }\n  ];\n\n  const templates = [\n    { name: \"Purchase Request\", category: \"Procurement\", approvers: 2, avg_time: \"2.5 days\" },\n    { name: \"Time Off Request\", category: \"HR\", approvers: 1, avg_time: \"1 day\" },\n    { name: \"Budget Approval\", category: \"Finance\", approvers: 3, avg_time: \"5 days\" },\n    { name: \"Contract Approval\", category: \"Legal\", approvers: 2, avg_time: \"7 days\" }\n  ];\n\n  const myTasks = [\n    { request: \"Equipment Purchase Request\", requester: \"John Smith\", amount: \"$2,500\", due: \"2024-01-18\", priority: \"medium\" },\n    { request: \"Software License\", requester: \"Lisa Brown\", amount: \"$1,200\", due: \"2024-01-19\", priority: \"low\" },\n    { request: \"Travel Expense\", requester: \"David Lee\", amount: \"$800\", due: \"2024-01-17\", priority: \"high\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"approvals-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"approvals-title\">\n            Approvals\n          </h1>\n          <p className=\"text-muted-foreground\">Manage approval workflows and requests</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-approval-templates\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Templates\n          </Button>\n          <Button data-testid=\"button-new-request\">\n            <CheckCircle className=\"w-4 h-4 mr-2\" />\n            New Request\n          </Button>\n        </div>\n      </div>\n\n      {/* Approvals Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending Requests</p>\n                <p className=\"text-2xl font-bold\">23</p>\n                <p className=\"text-sm text-orange-600\">Awaiting approval</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Approved Today</p>\n                <p className=\"text-2xl font-bold\">18</p>\n                <p className=\"text-sm text-green-600\">+5 vs yesterday</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg. Approval Time</p>\n                <p className=\"text-2xl font-bold\">2.8</p>\n                <p className=\"text-sm text-blue-600\">days</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Overdue Requests</p>\n                <p className=\"text-2xl font-bold\">3</p>\n                <p className=\"text-sm text-red-600\">Need attention</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Requests & My Tasks */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {requests.map((request) => (\n                <div key={request.id} className=\"p-3 border rounded-lg\" data-testid={`request-${request.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{request.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">{request.requester} â€¢ {request.submitted}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={\n                        request.status === \"approved\" ? \"default\" :\n                        request.status === \"pending\" ? \"secondary\" :\n                        \"destructive\"\n                      }>\n                        {request.status}\n                      </Badge>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{request.amount}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\">{request.type}</Badge>\n                    <Badge variant={\n                      request.priority === \"high\" ? \"destructive\" :\n                      request.priority === \"medium\" ? \"secondary\" :\n                      \"outline\"\n                    }>\n                      {request.priority}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>My Approval Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {myTasks.map((task, index) => (\n                <div key={index} className=\"p-3 border rounded-lg\" data-testid={`task-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{task.request}</p>\n                      <p className=\"text-sm text-muted-foreground\">From: {task.requester}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">{task.amount}</p>\n                      <Badge variant={\n                        task.priority === \"high\" ? \"destructive\" :\n                        task.priority === \"medium\" ? \"secondary\" :\n                        \"outline\"\n                      }>\n                        {task.priority}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-muted-foreground\">Due: {task.due}</p>\n                    <div className=\"flex space-x-2\">\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`approve-${index}`}>\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`reject-${index}`}>\n                        <XCircle className=\"w-3 h-3 mr-1\" />\n                        Reject\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Approval Templates */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Approval Templates</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {templates.map((template, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`template-${index}`}>\n                <div>\n                  <p className=\"font-medium\">{template.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">{template.category} â€¢ {template.approvers} approvers</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium\">{template.avg_time}</p>\n                  <p className=\"text-sm text-muted-foreground\">avg. time</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9232},"client/src/pages/documents.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Upload, Search, Share, FolderOpen, Download } from \"lucide-react\";\n\nexport default function Documents() {\n  const documents = [\n    { id: \"DOC001\", name: \"Annual Report 2023.pdf\", type: \"PDF\", size: \"2.4 MB\", modified: \"2024-01-15\", owner: \"John Smith\", tags: [\"Financial\", \"Report\"] },\n    { id: \"DOC002\", name: \"Product Specifications.docx\", type: \"Word\", size: \"856 KB\", modified: \"2024-01-14\", owner: \"Sarah Wilson\", tags: [\"Product\", \"Technical\"] },\n    { id: \"DOC003\", name: \"Marketing Presentation.pptx\", type: \"PowerPoint\", size: \"15.2 MB\", modified: \"2024-01-13\", owner: \"Mike Johnson\", tags: [\"Marketing\", \"Presentation\"] }\n  ];\n\n  const folders = [\n    { name: \"Finance\", documents: 24, size: \"45.2 MB\", modified: \"2024-01-15\" },\n    { name: \"HR Policies\", documents: 18, size: \"12.8 MB\", modified: \"2024-01-12\" },\n    { name: \"Marketing Assets\", documents: 67, size: \"234.5 MB\", modified: \"2024-01-14\" },\n    { name: \"Legal Documents\", documents: 12, size: \"8.9 MB\", modified: \"2024-01-10\" }\n  ];\n\n  const recentActivity = [\n    { user: \"John Smith\", action: \"uploaded\", document: \"Q4 Budget.xlsx\", time: \"2 hours ago\" },\n    { user: \"Sarah Wilson\", action: \"shared\", document: \"Project Plan.pdf\", time: \"4 hours ago\" },\n    { user: \"Mike Johnson\", action: \"edited\", document: \"Company Policy.docx\", time: \"6 hours ago\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"documents-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"documents-title\">\n            Documents\n          </h1>\n          <p className=\"text-muted-foreground\">Manage and organize your company documents</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-create-folder\">\n            <FolderOpen className=\"w-4 h-4 mr-2\" />\n            New Folder\n          </Button>\n          <Button data-testid=\"button-upload-document\">\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Upload\n          </Button>\n        </div>\n      </div>\n\n      {/* Document Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Documents</p>\n                <p className=\"text-2xl font-bold\">1,247</p>\n                <p className=\"text-sm text-blue-600\">+45 this week</p>\n              </div>\n              <FileText className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Storage Used</p>\n                <p className=\"text-2xl font-bold\">2.4 GB</p>\n                <p className=\"text-sm text-muted-foreground\">of 10 GB</p>\n              </div>\n              <Upload className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Shared Documents</p>\n                <p className=\"text-2xl font-bold\">89</p>\n                <p className=\"text-sm text-green-600\">Active shares</p>\n              </div>\n              <Share className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Downloads</p>\n                <p className=\"text-2xl font-bold\">156</p>\n                <p className=\"text-sm text-orange-600\">This month</p>\n              </div>\n              <Download className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Folders & Recent Documents */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Folders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {folders.map((folder, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\" data-testid={`folder-${index}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <FolderOpen className=\"w-5 h-5 text-blue-600\" />\n                    <div>\n                      <p className=\"font-medium\">{folder.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{folder.documents} documents â€¢ {folder.size}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{folder.modified}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Documents</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {documents.map((doc) => (\n                <div key={doc.id} className=\"p-3 border rounded-lg\" data-testid={`document-${doc.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-3\">\n                      <FileText className=\"w-4 h-4 text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium\">{doc.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{doc.owner} â€¢ {doc.size}</p>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{doc.modified}</p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    {doc.tags.map((tag, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentActivity.map((activity, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`activity-${index}`}>\n                <div>\n                  <p className=\"font-medium\">{activity.user} {activity.action} {activity.document}</p>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{activity.time}</p>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7523},"client/src/pages/ecommerce.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Package, TrendingUp, Users, DollarSign, Eye } from \"lucide-react\";\n\nexport default function Ecommerce() {\n  const orders = [\n    { id: \"ORD001\", customer: \"John Smith\", total: \"$127.50\", status: \"shipped\", date: \"2024-01-15\" },\n    { id: \"ORD002\", customer: \"Sarah Wilson\", total: \"$89.99\", status: \"processing\", date: \"2024-01-16\" },\n    { id: \"ORD003\", customer: \"Mike Johnson\", total: \"$234.75\", status: \"delivered\", date: \"2024-01-14\" }\n  ];\n\n  const topProducts = [\n    { name: \"Wireless Headphones\", sales: 124, revenue: \"$18,600\", trend: \"+15%\" },\n    { name: \"Smartphone Case\", sales: 89, revenue: \"$2,670\", trend: \"+8%\" },\n    { name: \"Laptop Stand\", sales: 67, revenue: \"$6,030\", trend: \"-2%\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"ecommerce-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"ecommerce-title\">\n            eCommerce\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your online store, orders, and products</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-view-store\">\n            <Eye className=\"w-4 h-4 mr-2\" />\n            View Store\n          </Button>\n          <Button data-testid=\"button-add-product\">\n            <Package className=\"w-4 h-4 mr-2\" />\n            Add Product\n          </Button>\n        </div>\n      </div>\n\n      {/* eCommerce Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Sales</p>\n                <p className=\"text-2xl font-bold\">$24,567</p>\n                <p className=\"text-sm text-green-600\">+18.2% this month</p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Orders</p>\n                <p className=\"text-2xl font-bold\">156</p>\n                <p className=\"text-sm text-blue-600\">42 this week</p>\n              </div>\n              <ShoppingCart className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Customers</p>\n                <p className=\"text-2xl font-bold\">1,247</p>\n                <p className=\"text-sm text-green-600\">+23 new</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Products</p>\n                <p className=\"text-2xl font-bold\">89</p>\n                <p className=\"text-sm text-orange-600\">12 out of stock</p>\n              </div>\n              <Package className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Orders & Top Products */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {orders.map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`order-${order.id}`}>\n                  <div>\n                    <p className=\"font-medium\">{order.id}</p>\n                    <p className=\"text-sm text-muted-foreground\">{order.customer}</p>\n                    <p className=\"text-sm text-muted-foreground\">{order.date}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{order.total}</p>\n                    <Badge variant={\n                      order.status === \"delivered\" ? \"default\" : \n                      order.status === \"shipped\" ? \"default\" : \n                      \"secondary\"\n                    }>\n                      {order.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Products</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {topProducts.map((product, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`top-product-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{product.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{product.sales} sales</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{product.revenue}</p>\n                    <p className={`text-sm ${product.trend.startsWith('+') ? 'text-green-600' : 'text-red-600'}`}>\n                      {product.trend}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Store Management */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Inventory Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span>In Stock</span>\n                <span className=\"font-medium text-green-600\">77 products</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Low Stock</span>\n                <span className=\"font-medium text-orange-600\">8 products</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Out of Stock</span>\n                <span className=\"font-medium text-red-600\">4 products</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Methods</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span>Credit Card</span>\n                <span className=\"font-medium\">78%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>PayPal</span>\n                <span className=\"font-medium\">16%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Bank Transfer</span>\n                <span className=\"font-medium\">6%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Store Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-shipping-rules\">\n              Configure Shipping\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-tax-settings\">\n              Tax Settings\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-payment-gateway\">\n              Payment Gateway\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8425},"client/src/pages/email.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mail, Send, Users, BarChart3, Edit, Calendar } from \"lucide-react\";\n\nexport default function Email() {\n  const campaigns = [\n    { id: \"EM001\", name: \"Monthly Newsletter\", status: \"sent\", recipients: 2547, opened: 1823, clicked: 456, sent_date: \"2024-01-15\" },\n    { id: \"EM002\", name: \"Product Launch\", status: \"scheduled\", recipients: 1200, opened: 0, clicked: 0, sent_date: \"2024-01-20\" },\n    { id: \"EM003\", name: \"Customer Survey\", status: \"draft\", recipients: 850, opened: 0, clicked: 0, sent_date: null }\n  ];\n\n  const templates = [\n    { name: \"Newsletter Template\", category: \"Newsletter\", opens: \"24.5%\", clicks: \"4.2%\" },\n    { name: \"Product Announcement\", category: \"Marketing\", opens: \"31.2%\", clicks: \"6.8%\" },\n    { name: \"Event Invitation\", category: \"Events\", opens: \"28.7%\", clicks: \"8.1%\" },\n    { name: \"Welcome Series\", category: \"Onboarding\", opens: \"42.3%\", clicks: \"12.4%\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"email-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"email-title\">\n            Email Marketing\n          </h1>\n          <p className=\"text-muted-foreground\">Create and manage email campaigns and newsletters</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-email-templates\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Templates\n          </Button>\n          <Button data-testid=\"button-create-campaign\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            New Campaign\n          </Button>\n        </div>\n      </div>\n\n      {/* Email Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Campaigns Sent</p>\n                <p className=\"text-2xl font-bold\">47</p>\n                <p className=\"text-sm text-green-600\">+8 this month</p>\n              </div>\n              <Send className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Open Rate</p>\n                <p className=\"text-2xl font-bold\">28.4%</p>\n                <p className=\"text-sm text-green-600\">+2.1% improvement</p>\n              </div>\n              <Mail className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Click Rate</p>\n                <p className=\"text-2xl font-bold\">5.7%</p>\n                <p className=\"text-sm text-green-600\">+0.8% improvement</p>\n              </div>\n              <BarChart3 className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Subscribers</p>\n                <p className=\"text-2xl font-bold\">12,847</p>\n                <p className=\"text-sm text-blue-600\">+234 this week</p>\n              </div>\n              <Users className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Campaigns & Templates */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Campaigns</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {campaigns.map((campaign) => (\n                <div key={campaign.id} className=\"p-3 border rounded-lg\" data-testid={`campaign-${campaign.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{campaign.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{campaign.id} â€¢ {campaign.recipients} recipients</p>\n                    </div>\n                    <Badge variant={\n                      campaign.status === \"sent\" ? \"default\" :\n                      campaign.status === \"scheduled\" ? \"secondary\" :\n                      \"outline\"\n                    }>\n                      {campaign.status}\n                    </Badge>\n                  </div>\n                  \n                  {campaign.status === \"sent\" && (\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Opened</p>\n                        <p className=\"font-medium\">{campaign.opened} ({Math.round((campaign.opened / campaign.recipients) * 100)}%)</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Clicked</p>\n                        <p className=\"font-medium\">{campaign.clicked} ({Math.round((campaign.clicked / campaign.recipients) * 100)}%)</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Sent Date</p>\n                        <p className=\"font-medium\">{campaign.sent_date}</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {campaign.status === \"scheduled\" && (\n                    <p className=\"text-sm text-muted-foreground\">Scheduled for: {campaign.sent_date}</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Email Templates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {templates.map((template, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`template-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{template.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{template.category}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm\">Opens: {template.opens}</p>\n                    <p className=\"text-sm\">Clicks: {template.clicks}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Email Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Email Marketing Tools</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-drag-drop-editor\">\n              <Edit className=\"w-6 h-6 mb-2\" />\n              <span>Drag & Drop Editor</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-automation\">\n              <Calendar className=\"w-6 h-6 mb-2\" />\n              <span>Automation</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-segmentation\">\n              <Users className=\"w-6 h-6 mb-2\" />\n              <span>Segmentation</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-analytics\">\n              <BarChart3 className=\"w-6 h-6 mb-2\" />\n              <span>Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8326},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Calendar, Users, MapPin, Clock, TrendingUp, Ticket, Plus, Edit, Trash2 } from \"lucide-react\";\nimport { insertEventSchema, type Event, type EventRegistration } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst eventFormSchema = insertEventSchema.extend({\n  name: z.string().min(1, \"Event name is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  capacity: z.string().min(1, \"Capacity is required\")\n});\n\ntype EventForm = z.infer<typeof eventFormSchema>;\n\nexport default function Events() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n  const { toast } = useToast();\n\n  // Fetch events\n  const { data: events = [], isLoading: isLoadingEvents } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: (data: EventForm) => apiRequest(\"POST\", \"/api/events\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setIsCreateOpen(false);\n      form.reset();\n      toast({ title: \"Event created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create event\", variant: \"destructive\" });\n    }\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<EventForm> }) => \n      apiRequest(\"PATCH\", `/api/events/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setEditingEvent(null);\n      editForm.reset();\n      toast({ title: \"Event updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update event\", variant: \"destructive\" });\n    }\n  });\n\n  // Delete event mutation\n  const deleteEventMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/events/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({ title: \"Event deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete event\", variant: \"destructive\" });\n    }\n  });\n\n  const form = useForm<EventForm>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      location: \"\",\n      capacity: \"50\",\n      registrationFee: \"0\",\n      eventType: \"conference\",\n      status: \"draft\"\n    }\n  });\n\n  const editForm = useForm<EventForm>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      location: \"\",\n      capacity: \"50\",\n      registrationFee: \"0\",\n      eventType: \"conference\",\n      status: \"draft\"\n    }\n  });\n\n  const onSubmit = (data: EventForm) => {\n    createEventMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: EventForm) => {\n    if (editingEvent) {\n      updateEventMutation.mutate({ id: editingEvent.id, data });\n    }\n  };\n\n  const handleEdit = (event: Event) => {\n    setEditingEvent(event);\n    editForm.reset({\n      name: event.name,\n      description: event.description || \"\",\n      startDate: event.startDate ? new Date(event.startDate).toISOString().split('T')[0] : \"\",\n      endDate: event.endDate ? new Date(event.endDate).toISOString().split('T')[0] : \"\",\n      location: event.location || \"\",\n      capacity: event.capacity?.toString() || \"50\",\n      registrationFee: event.registrationFee?.toString() || \"0\",\n      eventType: event.eventType,\n      status: event.status\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this event?\")) {\n      deleteEventMutation.mutate(id);\n    }\n  };\n\n  const publishedEvents = events.filter(e => e.status === \"published\").length;\n  const totalCapacity = events.reduce((sum, event) => sum + (event.capacity || 0), 0);\n  const upcomingEvents = events.filter(e => {\n    if (!e.startDate) return false;\n    return new Date(e.startDate) > new Date();\n  }).length;\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"events-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"events-title\">\n            Events\n          </h1>\n          <p className=\"text-muted-foreground\">Organize and manage events, conferences, and workshops</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-event-templates\">\n            <Ticket className=\"w-4 h-4 mr-2\" />\n            Templates\n          </Button>\n          <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-event\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Event\n          </Button>\n        </div>\n      </div>\n\n      {/* Events Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Events</p>\n                <p className=\"text-2xl font-bold\">{events.length}</p>\n                <p className=\"text-sm text-green-600\">{publishedEvents} published</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Capacity</p>\n                <p className=\"text-2xl font-bold\">{totalCapacity.toLocaleString()}</p>\n                <p className=\"text-sm text-blue-600\">All events</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Upcoming Events</p>\n                <p className=\"text-2xl font-bold\">{upcomingEvents}</p>\n                <p className=\"text-sm text-orange-600\">Next 30 days</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Event Types</p>\n                <p className=\"text-2xl font-bold\">{new Set(events.map(e => e.eventType)).size}</p>\n                <p className=\"text-sm text-muted-foreground\">Categories</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Events List */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>All Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoadingEvents ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"h-20 bg-muted rounded-lg animate-pulse\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {events.map((event) => (\n                  <div key={event.id} className=\"p-3 border rounded-lg\" data-testid={`event-${event.id}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{event.name}</p>\n                        {event.startDate && (\n                          <p className=\"text-sm text-muted-foreground flex items-center\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {new Date(event.startDate).toLocaleDateString()}\n                          </p>\n                        )}\n                        {event.location && (\n                          <p className=\"text-sm text-muted-foreground flex items-center\">\n                            <MapPin className=\"w-3 h-3 mr-1\" />\n                            {event.location}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-right\">\n                          <Badge variant={\n                            event.status === \"published\" ? \"default\" :\n                            event.status === \"confirmed\" ? \"default\" :\n                            \"secondary\"\n                          }>\n                            {event.status}\n                          </Badge>\n                          <p className=\"text-sm text-muted-foreground mt-1\">{event.capacity} capacity</p>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => handleEdit(event)} data-testid={`edit-event-${event.id}`}>\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            onClick={() => handleDelete(event.id)}\n                            data-testid={`delete-event-${event.id}`}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {events.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No events found. Create your first event!\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Event Status Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span>Draft Events</span>\n                <Badge variant=\"secondary\">{events.filter(e => e.status === \"draft\").length}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Published Events</span>\n                <Badge variant=\"default\">{publishedEvents}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Confirmed Events</span>\n                <Badge variant=\"default\">{events.filter(e => e.status === \"confirmed\").length}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Total Capacity</span>\n                <span className=\"font-medium\">{totalCapacity.toLocaleString()}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Event Management Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Management</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-registration-forms\">\n              <Ticket className=\"w-6 h-6 mb-2\" />\n              <span>Registration Forms</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-venue-management\">\n              <MapPin className=\"w-6 h-6 mb-2\" />\n              <span>Venue Management</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-attendee-communication\">\n              <Users className=\"w-6 h-6 mb-2\" />\n              <span>Communication</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-event-analytics\">\n              <TrendingUp className=\"w-6 h-6 mb-2\" />\n              <span>Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Create Event Dialog */}\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create New Event</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Annual Conference 2024\" {...field} data-testid=\"input-event-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"eventType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-event-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"conference\">Conference</SelectItem>\n                          <SelectItem value=\"workshop\">Workshop</SelectItem>\n                          <SelectItem value=\"seminar\">Seminar</SelectItem>\n                          <SelectItem value=\"training\">Training</SelectItem>\n                          <SelectItem value=\"meeting\">Meeting</SelectItem>\n                          <SelectItem value=\"webinar\">Webinar</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Event description...\" {...field} data-testid=\"input-event-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-event-start-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-event-end-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Convention Center\" {...field} data-testid=\"input-event-location\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"capacity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Capacity</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"50\" {...field} data-testid=\"input-event-capacity\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"registrationFee\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Registration Fee</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"0.00\" {...field} data-testid=\"input-event-fee\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-event-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"draft\">Draft</SelectItem>\n                          <SelectItem value=\"published\">Published</SelectItem>\n                          <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createEventMutation.isPending} data-testid=\"button-create-event-submit\">\n                  {createEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Event Dialog */}\n      <Dialog open={!!editingEvent} onOpenChange={() => setEditingEvent(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Event</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Annual Conference 2024\" {...field} data-testid=\"input-edit-event-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"eventType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Type</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-event-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"conference\">Conference</SelectItem>\n                          <SelectItem value=\"workshop\">Workshop</SelectItem>\n                          <SelectItem value=\"seminar\">Seminar</SelectItem>\n                          <SelectItem value=\"training\">Training</SelectItem>\n                          <SelectItem value=\"meeting\">Meeting</SelectItem>\n                          <SelectItem value=\"webinar\">Webinar</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Event description...\" {...field} data-testid=\"input-edit-event-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-edit-event-start-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-edit-event-end-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editForm.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Convention Center\" {...field} data-testid=\"input-edit-event-location\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"capacity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Capacity</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"50\" {...field} data-testid=\"input-edit-event-capacity\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"registrationFee\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Registration Fee</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"0.00\" {...field} data-testid=\"input-edit-event-fee\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-event-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"draft\">Draft</SelectItem>\n                          <SelectItem value=\"published\">Published</SelectItem>\n                          <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingEvent(null)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateEventMutation.isPending} data-testid=\"button-update-event-submit\">\n                  {updateEventMutation.isPending ? \"Updating...\" : \"Update Event\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":27959},"client/src/pages/fleet.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Car, MapPin, Fuel, Wrench, Calendar, AlertTriangle } from \"lucide-react\";\n\nexport default function Fleet() {\n  const vehicles = [\n    { id: \"VH001\", model: \"Toyota Camry\", year: 2022, driver: \"John Smith\", status: \"active\", mileage: 45678, nextService: \"2024-02-15\", location: \"Downtown Office\" },\n    { id: \"VH002\", model: \"Ford Transit\", year: 2021, driver: \"Sarah Wilson\", status: \"maintenance\", mileage: 67890, nextService: \"2024-01-25\", location: \"Service Center\" },\n    { id: \"VH003\", model: \"Honda Civic\", year: 2023, driver: \"Mike Johnson\", status: \"available\", mileage: 23456, nextService: \"2024-03-10\", location: \"Main Parking\" }\n  ];\n\n  const maintenance = [\n    { vehicle: \"Toyota Camry\", type: \"Oil Change\", date: \"2024-01-20\", cost: \"$45\", status: \"scheduled\" },\n    { vehicle: \"Ford Transit\", type: \"Brake Inspection\", date: \"2024-01-18\", cost: \"$120\", status: \"in_progress\" },\n    { vehicle: \"Honda Civic\", type: \"Tire Rotation\", date: \"2024-01-22\", cost: \"$35\", status: \"pending\" }\n  ];\n\n  const expenses = [\n    { category: \"Fuel\", amount: \"$2,847\", percentage: 45, color: \"blue\" },\n    { category: \"Maintenance\", amount: \"$1,234\", percentage: 20, color: \"orange\" },\n    { category: \"Insurance\", amount: \"$956\", percentage: 15, color: \"green\" },\n    { category: \"Other\", amount: \"$1,263\", percentage: 20, color: \"purple\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"fleet-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"fleet-title\">\n            Fleet Management\n          </h1>\n          <p className=\"text-muted-foreground\">Manage vehicles, drivers, and maintenance schedules</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-schedule-maintenance\">\n            <Wrench className=\"w-4 h-4 mr-2\" />\n            Schedule Maintenance\n          </Button>\n          <Button data-testid=\"button-add-vehicle\">\n            <Car className=\"w-4 h-4 mr-2\" />\n            Add Vehicle\n          </Button>\n        </div>\n      </div>\n\n      {/* Fleet Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Vehicles</p>\n                <p className=\"text-2xl font-bold\">47</p>\n                <p className=\"text-sm text-green-600\">42 active</p>\n              </div>\n              <Car className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Fuel Costs</p>\n                <p className=\"text-2xl font-bold\">$2,847</p>\n                <p className=\"text-sm text-red-600\">This month</p>\n              </div>\n              <Fuel className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Maintenance Due</p>\n                <p className=\"text-2xl font-bold\">8</p>\n                <p className=\"text-sm text-orange-600\">Next 30 days</p>\n              </div>\n              <Wrench className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg. Mileage</p>\n                <p className=\"text-2xl font-bold\">28.5</p>\n                <p className=\"text-sm text-green-600\">MPG</p>\n              </div>\n              <MapPin className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Vehicles & Maintenance */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Vehicle Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {vehicles.map((vehicle) => (\n                <div key={vehicle.id} className=\"p-3 border rounded-lg\" data-testid={`vehicle-${vehicle.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{vehicle.model} ({vehicle.year})</p>\n                      <p className=\"text-sm text-muted-foreground\">{vehicle.id} â€¢ {vehicle.driver}</p>\n                    </div>\n                    <Badge variant={\n                      vehicle.status === \"active\" ? \"default\" :\n                      vehicle.status === \"maintenance\" ? \"destructive\" :\n                      \"secondary\"\n                    }>\n                      {vehicle.status}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Mileage</p>\n                      <p className=\"font-medium\">{vehicle.mileage.toLocaleString()} miles</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Next Service</p>\n                      <p className=\"font-medium\">{vehicle.nextService}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center mt-2\">\n                    <MapPin className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">{vehicle.location}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Maintenance Schedule</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {maintenance.map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`maintenance-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{item.type}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.vehicle}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.date}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{item.cost}</p>\n                    <Badge variant={\n                      item.status === \"in_progress\" ? \"default\" :\n                      item.status === \"scheduled\" ? \"secondary\" :\n                      \"outline\"\n                    }>\n                      {item.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fleet Expenses */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Fleet Expenses</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {expenses.map((expense, index) => (\n              <div key={index} className=\"text-center p-4 border rounded-lg\" data-testid={`expense-${index}`}>\n                <p className=\"text-2xl font-bold\">{expense.amount}</p>\n                <p className=\"text-sm text-muted-foreground\">{expense.category}</p>\n                <p className=\"text-sm text-muted-foreground\">{expense.percentage}% of total</p>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8314},"client/src/pages/helpdesk.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Headphones, Clock, Users, CheckCircle, AlertTriangle, MessageSquare } from \"lucide-react\";\n\nexport default function Helpdesk() {\n  const tickets = [\n    { id: \"TK001\", title: \"Login Issues\", customer: \"John Smith\", priority: \"high\", status: \"open\", assigned: \"Sarah Wilson\", created: \"2024-01-16\" },\n    { id: \"TK002\", title: \"Payment Problem\", customer: \"Lisa Brown\", priority: \"urgent\", status: \"in_progress\", assigned: \"Mike Johnson\", created: \"2024-01-16\" },\n    { id: \"TK003\", title: \"Feature Request\", customer: \"David Lee\", priority: \"low\", status: \"resolved\", assigned: \"Emma Davis\", created: \"2024-01-15\" }\n  ];\n\n  const knowledge_base = [\n    { title: \"How to Reset Password\", category: \"Account\", views: 1247, updated: \"2024-01-10\" },\n    { title: \"Billing and Payments\", category: \"Finance\", views: 856, updated: \"2024-01-12\" },\n    { title: \"Product Installation Guide\", category: \"Technical\", views: 2341, updated: \"2024-01-14\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"helpdesk-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"helpdesk-title\">\n            Helpdesk\n          </h1>\n          <p className=\"text-muted-foreground\">Manage customer support tickets and knowledge base</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-knowledge-base\">\n            <MessageSquare className=\"w-4 h-4 mr-2\" />\n            Knowledge Base\n          </Button>\n          <Button data-testid=\"button-create-ticket\">\n            <Headphones className=\"w-4 h-4 mr-2\" />\n            New Ticket\n          </Button>\n        </div>\n      </div>\n\n      {/* Helpdesk Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Open Tickets</p>\n                <p className=\"text-2xl font-bold\">23</p>\n                <p className=\"text-sm text-orange-600\">5 urgent</p>\n              </div>\n              <Headphones className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg. Response Time</p>\n                <p className=\"text-2xl font-bold\">2.4h</p>\n                <p className=\"text-sm text-green-600\">-15% improvement</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Satisfaction Rate</p>\n                <p className=\"text-2xl font-bold\">94.8%</p>\n                <p className=\"text-sm text-green-600\">+2.1% this month</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Resolved Today</p>\n                <p className=\"text-2xl font-bold\">18</p>\n                <p className=\"text-sm text-blue-600\">Target: 20</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tickets & Knowledge Base */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Tickets</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {tickets.map((ticket) => (\n                <div key={ticket.id} className=\"p-3 border rounded-lg\" data-testid={`ticket-${ticket.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{ticket.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">{ticket.id} â€¢ {ticket.customer}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Badge variant={\n                        ticket.priority === \"urgent\" ? \"destructive\" :\n                        ticket.priority === \"high\" ? \"destructive\" :\n                        \"secondary\"\n                      }>\n                        {ticket.priority}\n                      </Badge>\n                      <Badge variant={\n                        ticket.status === \"resolved\" ? \"default\" :\n                        ticket.status === \"in_progress\" ? \"secondary\" :\n                        \"outline\"\n                      }>\n                        {ticket.status}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between text-sm text-muted-foreground\">\n                    <span>Assigned to: {ticket.assigned}</span>\n                    <span>{ticket.created}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Knowledge Base Articles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {knowledge_base.map((article, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`kb-article-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{article.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">{article.category}</p>\n                    <p className=\"text-sm text-muted-foreground\">Updated: {article.updated}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{article.views} views</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Support Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Support Tools</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-live-chat\">\n              <MessageSquare className=\"w-6 h-6 mb-2\" />\n              <span>Live Chat</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-ticket-automation\">\n              <AlertTriangle className=\"w-6 h-6 mb-2\" />\n              <span>Automation</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-sla-management\">\n              <Clock className=\"w-6 h-6 mb-2\" />\n              <span>SLA Management</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-customer-portal\">\n              <Users className=\"w-6 h-6 mb-2\" />\n              <span>Customer Portal</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7943},"client/src/pages/knowledge.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, Search, Edit, Share, Star, FolderOpen } from \"lucide-react\";\n\nexport default function Knowledge() {\n  const articles = [\n    { id: \"KB001\", title: \"Product Installation Guide\", category: \"Technical\", author: \"John Smith\", views: 1247, rating: 4.8, updated: \"2024-01-15\", status: \"published\" },\n    { id: \"KB002\", title: \"Company Policies & Procedures\", category: \"HR\", author: \"Sarah Wilson\", views: 856, rating: 4.6, updated: \"2024-01-12\", status: \"published\" },\n    { id: \"KB003\", title: \"Sales Process Workflow\", category: \"Sales\", author: \"Mike Johnson\", views: 2341, rating: 4.9, updated: \"2024-01-14\", status: \"draft\" }\n  ];\n\n  const categories = [\n    { name: \"Technical Documentation\", articles: 45, icon: \"ðŸ”§\", color: \"blue\" },\n    { name: \"HR Policies\", articles: 23, icon: \"ðŸ‘¥\", color: \"green\" },\n    { name: \"Sales & Marketing\", articles: 34, icon: \"ðŸ“ˆ\", color: \"orange\" },\n    { name: \"Product Guides\", articles: 67, icon: \"ðŸ“š\", color: \"purple\" }\n  ];\n\n  const recentActivity = [\n    { user: \"John Smith\", action: \"created\", article: \"API Integration Guide\", time: \"2 hours ago\" },\n    { user: \"Sarah Wilson\", action: \"updated\", article: \"Employee Handbook\", time: \"4 hours ago\" },\n    { user: \"Mike Johnson\", action: \"reviewed\", article: \"Customer Onboarding\", time: \"6 hours ago\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"knowledge-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"knowledge-title\">\n            Knowledge\n          </h1>\n          <p className=\"text-muted-foreground\">Create and manage your company knowledge base</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-search-knowledge\">\n            <Search className=\"w-4 h-4 mr-2\" />\n            Search\n          </Button>\n          <Button data-testid=\"button-create-article\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            New Article\n          </Button>\n        </div>\n      </div>\n\n      {/* Knowledge Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Articles</p>\n                <p className=\"text-2xl font-bold\">169</p>\n                <p className=\"text-sm text-green-600\">+12 this month</p>\n              </div>\n              <BookOpen className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Views</p>\n                <p className=\"text-2xl font-bold\">45.2K</p>\n                <p className=\"text-sm text-blue-600\">+18% vs last month</p>\n              </div>\n              <Search className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Contributors</p>\n                <p className=\"text-2xl font-bold\">23</p>\n                <p className=\"text-sm text-green-600\">Active authors</p>\n              </div>\n              <Edit className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg. Rating</p>\n                <p className=\"text-2xl font-bold\">4.7</p>\n                <p className=\"text-sm text-orange-600\">out of 5</p>\n              </div>\n              <Star className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Categories & Recent Articles */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Knowledge Categories</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {categories.map((category, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\" data-testid={`category-${index}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-2xl\">{category.icon}</span>\n                    <div>\n                      <p className=\"font-medium\">{category.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{category.articles} articles</p>\n                    </div>\n                  </div>\n                  <FolderOpen className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Popular Articles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {articles.map((article) => (\n                <div key={article.id} className=\"p-3 border rounded-lg\" data-testid={`article-${article.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{article.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">{article.author} â€¢ {article.views} views</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={article.status === \"published\" ? \"default\" : \"secondary\"}>\n                        {article.status}\n                      </Badge>\n                      <div className=\"flex items-center mt-1\">\n                        <Star className=\"w-3 h-3 text-yellow-500 mr-1\" />\n                        <span className=\"text-sm\">{article.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\">{article.category}</Badge>\n                    <p className=\"text-sm text-muted-foreground\">{article.updated}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentActivity.map((activity, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`activity-${index}`}>\n                <div>\n                  <p className=\"font-medium\">{activity.user} {activity.action} \"{activity.article}\"</p>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{activity.time}</p>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7697},"client/src/pages/maintenance.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wrench, Calendar, AlertTriangle, CheckCircle, Clock, Settings } from \"lucide-react\";\n\nexport default function Maintenance() {\n  const maintenanceRequests = [\n    { id: \"MR001\", equipment: \"Printer - Floor 2\", type: \"Repair\", priority: \"high\", status: \"in_progress\", assigned: \"John Smith\", created: \"2024-01-15\", due: \"2024-01-17\" },\n    { id: \"MR002\", equipment: \"HVAC System\", type: \"Preventive\", priority: \"medium\", status: \"scheduled\", assigned: \"Sarah Wilson\", created: \"2024-01-14\", due: \"2024-01-20\" },\n    { id: \"MR003\", equipment: \"Coffee Machine\", type: \"Repair\", priority: \"low\", status: \"completed\", assigned: \"Mike Johnson\", created: \"2024-01-13\", due: \"2024-01-16\" }\n  ];\n\n  const equipment = [\n    { name: \"HVAC System\", location: \"Building A\", status: \"operational\", last_maintenance: \"2024-01-01\", next_maintenance: \"2024-03-01\" },\n    { name: \"Generator\", location: \"Basement\", status: \"maintenance_needed\", last_maintenance: \"2023-11-15\", next_maintenance: \"2024-01-15\" },\n    { name: \"Elevator 1\", location: \"Main Building\", status: \"operational\", last_maintenance: \"2024-01-10\", next_maintenance: \"2024-04-10\" },\n    { name: \"Security System\", location: \"All Floors\", status: \"operational\", last_maintenance: \"2024-01-05\", next_maintenance: \"2024-02-05\" }\n  ];\n\n  const analytics = [\n    { metric: \"Active Requests\", value: \"23\", change: \"+3\", trend: \"up\" },\n    { metric: \"Avg. Response Time\", value: \"2.4h\", change: \"-0.5h\", trend: \"down\" },\n    { metric: \"Equipment Uptime\", value: \"97.8%\", change: \"+1.2%\", trend: \"up\" },\n    { metric: \"Preventive Maintenance\", value: \"89%\", change: \"+5%\", trend: \"up\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"maintenance-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"maintenance-title\">\n            Maintenance\n          </h1>\n          <p className=\"text-muted-foreground\">Manage equipment maintenance and repair requests</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-preventive-schedule\">\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Schedule Maintenance\n          </Button>\n          <Button data-testid=\"button-new-request\">\n            <Wrench className=\"w-4 h-4 mr-2\" />\n            New Request\n          </Button>\n        </div>\n      </div>\n\n      {/* Maintenance Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {analytics.map((item, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{item.metric}</p>\n                  <p className=\"text-2xl font-bold\">{item.value}</p>\n                  <p className={`text-sm ${item.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>\n                    {item.change}\n                  </p>\n                </div>\n                <Wrench className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Maintenance Requests & Equipment Status */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Maintenance Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {maintenanceRequests.map((request) => (\n                <div key={request.id} className=\"p-3 border rounded-lg\" data-testid={`request-${request.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{request.equipment}</p>\n                      <p className=\"text-sm text-muted-foreground\">{request.id} â€¢ {request.assigned}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={\n                        request.status === \"completed\" ? \"default\" :\n                        request.status === \"in_progress\" ? \"secondary\" :\n                        \"outline\"\n                      }>\n                        {request.status}\n                      </Badge>\n                      <Badge variant={\n                        request.priority === \"high\" ? \"destructive\" :\n                        request.priority === \"medium\" ? \"secondary\" :\n                        \"outline\"\n                      } className=\"ml-2\">\n                        {request.priority}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">{request.type} â€¢ Created: {request.created}</span>\n                    <span className=\"text-muted-foreground\">Due: {request.due}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Equipment Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {equipment.map((item, index) => (\n                <div key={index} className=\"p-3 border rounded-lg\" data-testid={`equipment-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{item.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{item.location}</p>\n                    </div>\n                    <Badge variant={\n                      item.status === \"operational\" ? \"default\" :\n                      \"destructive\"\n                    }>\n                      {item.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Last Maintenance</p>\n                      <p className=\"font-medium\">{item.last_maintenance}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Next Maintenance</p>\n                      <p className=\"font-medium\">{item.next_maintenance}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Maintenance Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Maintenance Management</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-preventive-maintenance\">\n              <Calendar className=\"w-6 h-6 mb-2\" />\n              <span>Preventive Maintenance</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-work-orders\">\n              <Wrench className=\"w-6 h-6 mb-2\" />\n              <span>Work Orders</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-equipment-tracking\">\n              <Settings className=\"w-6 h-6 mb-2\" />\n              <span>Equipment Tracking</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-maintenance-analytics\">\n              <CheckCircle className=\"w-6 h-6 mb-2\" />\n              <span>Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8124},"client/src/pages/marketing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mail, Users, TrendingUp, Target, Calendar, BarChart3 } from \"lucide-react\";\n\nexport default function Marketing() {\n  const campaigns = [\n    { name: \"Spring Sale\", type: \"Email\", status: \"active\", sent: 2547, opened: 1023, clicked: 156, date: \"2024-01-15\" },\n    { name: \"Product Launch\", type: \"Social\", status: \"scheduled\", sent: 0, opened: 0, clicked: 0, date: \"2024-01-20\" },\n    { name: \"Newsletter\", type: \"Email\", status: \"completed\", sent: 5234, opened: 2847, clicked: 423, date: \"2024-01-10\" }\n  ];\n\n  const leads = [\n    { source: \"Website\", count: 247, conversion: \"18.2%\", cost: \"$45\" },\n    { source: \"Social Media\", count: 189, conversion: \"12.4%\", cost: \"$28\" },\n    { source: \"Email Campaign\", count: 156, conversion: \"24.1%\", cost: \"$15\" },\n    { source: \"Google Ads\", count: 134, conversion: \"9.8%\", cost: \"$67\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"marketing-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"marketing-title\">\n            Marketing\n          </h1>\n          <p className=\"text-muted-foreground\">Manage campaigns, leads, and marketing automation</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-create-lead-form\">\n            <Target className=\"w-4 h-4 mr-2\" />\n            Lead Form\n          </Button>\n          <Button data-testid=\"button-create-campaign\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            New Campaign\n          </Button>\n        </div>\n      </div>\n\n      {/* Marketing Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Leads</p>\n                <p className=\"text-2xl font-bold\">1,547</p>\n                <p className=\"text-sm text-green-600\">+15.2% this month</p>\n              </div>\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Conversion Rate</p>\n                <p className=\"text-2xl font-bold\">16.8%</p>\n                <p className=\"text-sm text-green-600\">+2.1% improvement</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Campaigns</p>\n                <p className=\"text-2xl font-bold\">12</p>\n                <p className=\"text-sm text-blue-600\">3 scheduled</p>\n              </div>\n              <Mail className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Marketing ROI</p>\n                <p className=\"text-2xl font-bold\">324%</p>\n                <p className=\"text-sm text-green-600\">+45% vs last quarter</p>\n              </div>\n              <BarChart3 className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Campaigns & Lead Sources */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Campaigns</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {campaigns.map((campaign, index) => (\n                <div key={index} className=\"p-3 border rounded-lg\" data-testid={`campaign-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{campaign.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{campaign.type} â€¢ {campaign.date}</p>\n                    </div>\n                    <Badge variant={\n                      campaign.status === \"active\" ? \"default\" : \n                      campaign.status === \"scheduled\" ? \"secondary\" : \n                      \"outline\"\n                    }>\n                      {campaign.status}\n                    </Badge>\n                  </div>\n                  {campaign.status !== \"scheduled\" && (\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Sent</p>\n                        <p className=\"font-medium\">{campaign.sent.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Opened</p>\n                        <p className=\"font-medium\">{campaign.opened.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Clicked</p>\n                        <p className=\"font-medium\">{campaign.clicked.toLocaleString()}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Lead Sources</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {leads.map((lead, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`lead-source-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{lead.source}</p>\n                    <p className=\"text-sm text-muted-foreground\">{lead.count} leads</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{lead.conversion}</p>\n                    <p className=\"text-sm text-muted-foreground\">{lead.cost} per lead</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Marketing Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Marketing Tools</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-email-marketing\">\n              <Mail className=\"w-6 h-6 mb-2\" />\n              <span>Email Marketing</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-social-media\">\n              <Users className=\"w-6 h-6 mb-2\" />\n              <span>Social Media</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-automation\">\n              <Target className=\"w-6 h-6 mb-2\" />\n              <span>Automation</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-analytics\">\n              <BarChart3 className=\"w-6 h-6 mb-2\" />\n              <span>Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7986},"client/src/pages/pos.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calculator, CreditCard, Printer, ShoppingBag, Users, DollarSign } from \"lucide-react\";\n\nexport default function POS() {\n  const [cart, setCart] = useState<any[]>([]);\n  const [total, setTotal] = useState(0);\n\n  const products = [\n    { id: 1, name: \"Coffee\", price: 4.50, category: \"Beverages\" },\n    { id: 2, name: \"Sandwich\", price: 8.95, category: \"Food\" },\n    { id: 3, name: \"Tea\", price: 3.25, category: \"Beverages\" },\n    { id: 4, name: \"Pastry\", price: 5.50, category: \"Food\" }\n  ];\n\n  const recentSales = [\n    { id: \"S001\", amount: \"$24.50\", items: 3, time: \"10:30 AM\", payment: \"Card\" },\n    { id: \"S002\", amount: \"$18.75\", items: 2, time: \"10:25 AM\", payment: \"Cash\" },\n    { id: \"S003\", amount: \"$31.20\", items: 4, time: \"10:18 AM\", payment: \"Card\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"pos-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"pos-title\">\n            Point of Sale\n          </h1>\n          <p className=\"text-muted-foreground\">Process sales transactions and manage payments</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-open-register\">\n            <Calculator className=\"w-4 h-4 mr-2\" />\n            Open Register\n          </Button>\n          <Button variant=\"outline\" data-testid=\"button-close-register\">\n            <DollarSign className=\"w-4 h-4 mr-2\" />\n            Close Register\n          </Button>\n        </div>\n      </div>\n\n      {/* POS Interface */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n        {/* Product Selection */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Products</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {products.map((product) => (\n                  <Button\n                    key={product.id}\n                    variant=\"outline\"\n                    className=\"h-24 flex flex-col items-center justify-center\"\n                    data-testid={`product-${product.id}`}\n                    onClick={() => {\n                      const existingItem = cart.find(item => item.id === product.id);\n                      if (existingItem) {\n                        setCart(cart.map(item => \n                          item.id === product.id \n                            ? { ...item, quantity: item.quantity + 1 }\n                            : item\n                        ));\n                      } else {\n                        setCart([...cart, { ...product, quantity: 1 }]);\n                      }\n                      setTotal(total + product.price);\n                    }}\n                  >\n                    <ShoppingBag className=\"w-6 h-6 mb-2\" />\n                    <span className=\"text-sm font-medium\">{product.name}</span>\n                    <span className=\"text-xs text-muted-foreground\">${product.price}</span>\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Shopping Cart & Payment */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Current Sale</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {cart.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-8\">No items in cart</p>\n              ) : (\n                <>\n                  <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                    {cart.map((item, index) => (\n                      <div key={index} className=\"flex justify-between items-center p-2 border rounded\" data-testid={`cart-item-${item.id}`}>\n                        <div>\n                          <p className=\"font-medium\">{item.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                        </div>\n                        <p className=\"font-medium\">${(item.price * item.quantity).toFixed(2)}</p>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between items-center text-lg font-bold\">\n                      <span>Total:</span>\n                      <span data-testid=\"cart-total\">${total.toFixed(2)}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Button className=\"w-full\" data-testid=\"button-pay-card\">\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Pay by Card\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-pay-cash\">\n                      <DollarSign className=\"w-4 h-4 mr-2\" />\n                      Pay by Cash\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      data-testid=\"button-clear-cart\"\n                      onClick={() => {\n                        setCart([]);\n                        setTotal(0);\n                      }}\n                    >\n                      Clear Cart\n                    </Button>\n                  </div>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sales Summary & Recent Transactions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Today's Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold\">$1,247</p>\n                <p className=\"text-sm text-muted-foreground\">Total Sales</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold\">89</p>\n                <p className=\"text-sm text-muted-foreground\">Transactions</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold\">$14.01</p>\n                <p className=\"text-sm text-muted-foreground\">Avg. Sale</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold\">67</p>\n                <p className=\"text-sm text-muted-foreground\">Customers</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Sales</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {recentSales.map((sale) => (\n                <div key={sale.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`recent-sale-${sale.id}`}>\n                  <div>\n                    <p className=\"font-medium\">{sale.id}</p>\n                    <p className=\"text-sm text-muted-foreground\">{sale.items} items â€¢ {sale.time}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{sale.amount}</p>\n                    <Badge variant={sale.payment === \"Card\" ? \"default\" : \"secondary\"}>\n                      {sale.payment}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8059},"client/src/pages/purchase.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, ShoppingCart, Package, Clock, TrendingUp, Edit, Trash2 } from \"lucide-react\";\nimport { insertPurchaseOrderSchema, type PurchaseOrder, type Partner } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst purchaseOrderFormSchema = insertPurchaseOrderSchema.extend({\n  vendorId: z.string().min(1, \"Vendor is required\"),\n  totalAmount: z.string().min(1, \"Amount is required\")\n});\n\ntype PurchaseOrderForm = z.infer<typeof purchaseOrderFormSchema>;\n\nexport default function Purchase() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingOrder, setEditingOrder] = useState<PurchaseOrder | null>(null);\n  const { toast } = useToast();\n\n  // Fetch purchase orders\n  const { data: purchaseOrders = [], isLoading: isLoadingOrders } = useQuery<PurchaseOrder[]>({\n    queryKey: [\"/api/purchase-orders\"],\n  });\n\n  // Fetch vendors (partners who are vendors)\n  const { data: vendors = [] } = useQuery<Partner[]>({\n    queryKey: [\"/api/partners\"],\n    select: (data) => data.filter(partner => partner.isVendor)\n  });\n\n  // Create purchase order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: (data: PurchaseOrderForm) => apiRequest(\"/api/purchase-orders\", {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      setIsCreateOpen(false);\n      form.reset();\n      toast({ title: \"Purchase order created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create purchase order\", variant: \"destructive\" });\n    }\n  });\n\n  // Update purchase order mutation\n  const updateOrderMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<PurchaseOrderForm> }) => \n      apiRequest(`/api/purchase-orders/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data)\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      setEditingOrder(null);\n      editForm.reset();\n      toast({ title: \"Purchase order updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update purchase order\", variant: \"destructive\" });\n    }\n  });\n\n  // Delete purchase order mutation\n  const deleteOrderMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/purchase-orders/${id}`, {\n      method: \"DELETE\"\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      toast({ title: \"Purchase order deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete purchase order\", variant: \"destructive\" });\n    }\n  });\n\n  const form = useForm<PurchaseOrderForm>({\n    resolver: zodResolver(purchaseOrderFormSchema),\n    defaultValues: {\n      name: \"\",\n      vendorId: \"\",\n      state: \"draft\",\n      totalAmount: \"0\",\n      currency: \"USD\"\n    }\n  });\n\n  const editForm = useForm<PurchaseOrderForm>({\n    resolver: zodResolver(purchaseOrderFormSchema),\n    defaultValues: {\n      name: \"\",\n      vendorId: \"\",\n      state: \"draft\",\n      totalAmount: \"0\",\n      currency: \"USD\"\n    }\n  });\n\n  const onSubmit = (data: PurchaseOrderForm) => {\n    createOrderMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: PurchaseOrderForm) => {\n    if (editingOrder) {\n      updateOrderMutation.mutate({ id: editingOrder.id, data });\n    }\n  };\n\n  const handleEdit = (order: PurchaseOrder) => {\n    setEditingOrder(order);\n    editForm.reset({\n      name: order.name,\n      vendorId: order.vendorId || \"\",\n      state: order.state,\n      totalAmount: order.totalAmount || \"0\",\n      currency: order.currency\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this purchase order?\")) {\n      deleteOrderMutation.mutate(id);\n    }\n  };\n\n  const totalSpent = purchaseOrders.reduce((sum, order) => sum + Number(order.totalAmount || 0), 0);\n  const confirmedOrders = purchaseOrders.filter(o => o.state === \"confirmed\").length;\n  const draftOrders = purchaseOrders.filter(o => o.state === \"draft\").length;\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"purchase-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"purchase-title\">\n            Purchase\n          </h1>\n          <p className=\"text-muted-foreground\">Manage purchase orders, vendors, and procurement</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-request-quotation\">\n            <Package className=\"w-4 h-4 mr-2\" />\n            Request Quotation\n          </Button>\n          <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-purchase-order\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Purchase Order\n          </Button>\n        </div>\n      </div>\n\n      {/* Purchase Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Purchase Orders</p>\n                <p className=\"text-2xl font-bold\">{purchaseOrders.length}</p>\n                <p className=\"text-sm text-blue-600\">{draftOrders} draft</p>\n              </div>\n              <ShoppingCart className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Confirmed Orders</p>\n                <p className=\"text-2xl font-bold\">{confirmedOrders}</p>\n                <p className=\"text-sm text-green-600\">Active</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n                <p className=\"text-2xl font-bold\">${totalSpent.toLocaleString()}</p>\n                <p className=\"text-sm text-green-600\">All orders</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Vendors</p>\n                <p className=\"text-2xl font-bold\">{vendors.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Suppliers</p>\n              </div>\n              <Package className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Purchase Orders & Quick Stats */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Purchase Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoadingOrders ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded-lg animate-pulse\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {purchaseOrders.map((order) => {\n                  const vendor = vendors.find(v => v.id === order.vendorId);\n                  return (\n                    <div key={order.id} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`purchase-order-${order.id}`}>\n                      <div>\n                        <p className=\"font-medium\">{order.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{vendor?.name || 'Unknown Vendor'}</p>\n                        <p className=\"text-sm text-muted-foreground\">{new Date(order.orderDate).toLocaleDateString()}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">${Number(order.totalAmount || 0).toLocaleString()}</p>\n                          <Badge variant={order.state === \"confirmed\" ? \"default\" : order.state === \"received\" ? \"default\" : \"secondary\"}>\n                            {order.state}\n                          </Badge>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => handleEdit(order)} data-testid={`edit-order-${order.id}`}>\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            onClick={() => handleDelete(order.id)}\n                            data-testid={`delete-order-${order.id}`}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                {purchaseOrders.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No purchase orders found. Create your first one!\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Order Status Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span>Draft Orders</span>\n                <Badge variant=\"secondary\">{draftOrders}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Confirmed Orders</span>\n                <Badge variant=\"default\">{confirmedOrders}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Received Orders</span>\n                <Badge variant=\"default\">{purchaseOrders.filter(o => o.state === \"received\").length}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span>Total Value</span>\n                <span className=\"font-medium\">${totalSpent.toLocaleString()}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Vendor Performance */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Vendor Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">95%</p>\n              <p className=\"text-sm text-muted-foreground\">On-time Delivery</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">4.8/5</p>\n              <p className=\"text-sm text-muted-foreground\">Quality Rating</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-orange-600\">2.3 days</p>\n              <p className=\"text-sm text-muted-foreground\">Avg Lead Time</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Create Purchase Order Dialog */}\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Purchase Order</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purchase Order Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"PO001 - Office Supplies\" {...field} data-testid=\"input-po-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"vendorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vendor</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-vendor\">\n                          <SelectValue placeholder=\"Select a vendor\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {vendors.map((vendor) => (\n                          <SelectItem key={vendor.id} value={vendor.id}>\n                            {vendor.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"totalAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Total Amount</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"0.00\" {...field} data-testid=\"input-po-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-po-state\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"draft\">Draft</SelectItem>\n                        <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                        <SelectItem value=\"received\">Received</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createOrderMutation.isPending} data-testid=\"button-create-po\">\n                  {createOrderMutation.isPending ? \"Creating...\" : \"Create Purchase Order\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Purchase Order Dialog */}\n      <Dialog open={!!editingOrder} onOpenChange={() => setEditingOrder(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Purchase Order</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purchase Order Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"PO001 - Office Supplies\" {...field} data-testid=\"input-edit-po-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={editForm.control}\n                name=\"vendorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vendor</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-vendor\">\n                          <SelectValue placeholder=\"Select a vendor\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {vendors.map((vendor) => (\n                          <SelectItem key={vendor.id} value={vendor.id}>\n                            {vendor.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={editForm.control}\n                name=\"totalAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Total Amount</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"0.00\" {...field} data-testid=\"input-edit-po-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={editForm.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-po-state\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"draft\">Draft</SelectItem>\n                        <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                        <SelectItem value=\"received\">Received</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingOrder(null)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateOrderMutation.isPending} data-testid=\"button-update-po\">\n                  {updateOrderMutation.isPending ? \"Updating...\" : \"Update Purchase Order\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20852},"client/src/pages/sms.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Send, Users, BarChart3, Phone, Clock } from \"lucide-react\";\n\nexport default function SMS() {\n  const campaigns = [\n    { id: \"SMS001\", name: \"Appointment Reminders\", status: \"active\", sent: 1234, delivered: 1201, clicked: 89, date: \"2024-01-15\" },\n    { id: \"SMS002\", name: \"Product Launch Alert\", status: \"scheduled\", sent: 0, delivered: 0, clicked: 0, date: \"2024-01-20\" },\n    { id: \"SMS003\", name: \"Payment Reminder\", status: \"draft\", sent: 0, delivered: 0, clicked: 0, date: null }\n  ];\n\n  const templates = [\n    { name: \"Appointment Reminder\", category: \"Healthcare\", usage: 234, success_rate: \"97.2%\" },\n    { name: \"Payment Due Notice\", category: \"Finance\", usage: 189, success_rate: \"94.8%\" },\n    { name: \"Order Confirmation\", category: \"eCommerce\", usage: 456, success_rate: \"98.5%\" },\n    { name: \"Event Notification\", category: \"Events\", usage: 123, success_rate: \"96.1%\" }\n  ];\n\n  const analytics = [\n    { metric: \"Messages Sent\", value: \"12,847\", change: \"+8.2%\", trend: \"up\" },\n    { metric: \"Delivery Rate\", value: \"97.3%\", change: \"+0.5%\", trend: \"up\" },\n    { metric: \"Click Rate\", value: \"7.2%\", change: \"+1.1%\", trend: \"up\" },\n    { metric: \"Response Rate\", value: \"23.4%\", change: \"+2.3%\", trend: \"up\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"sms-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"sms-title\">\n            SMS Marketing\n          </h1>\n          <p className=\"text-muted-foreground\">Send targeted SMS campaigns and notifications</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-sms-templates\">\n            <MessageSquare className=\"w-4 h-4 mr-2\" />\n            Templates\n          </Button>\n          <Button data-testid=\"button-send-sms\">\n            <Send className=\"w-4 h-4 mr-2\" />\n            Send SMS\n          </Button>\n        </div>\n      </div>\n\n      {/* SMS Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {analytics.map((item, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{item.metric}</p>\n                  <p className=\"text-2xl font-bold\">{item.value}</p>\n                  <p className={`text-sm ${item.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>\n                    {item.change}\n                  </p>\n                </div>\n                <MessageSquare className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Campaigns & Templates */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>SMS Campaigns</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {campaigns.map((campaign) => (\n                <div key={campaign.id} className=\"p-3 border rounded-lg\" data-testid={`campaign-${campaign.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{campaign.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{campaign.id}</p>\n                    </div>\n                    <Badge variant={\n                      campaign.status === \"active\" ? \"default\" :\n                      campaign.status === \"scheduled\" ? \"secondary\" :\n                      \"outline\"\n                    }>\n                      {campaign.status}\n                    </Badge>\n                  </div>\n                  \n                  {campaign.status === \"active\" && (\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Sent</p>\n                        <p className=\"font-medium\">{campaign.sent.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Delivered</p>\n                        <p className=\"font-medium\">{campaign.delivered.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Clicked</p>\n                        <p className=\"font-medium\">{campaign.clicked}</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {campaign.status === \"scheduled\" && (\n                    <p className=\"text-sm text-muted-foreground\">Scheduled for: {campaign.date}</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>SMS Templates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {templates.map((template, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`template-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{template.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{template.category} â€¢ {template.usage} uses</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-green-600\">{template.success_rate}</p>\n                    <p className=\"text-sm text-muted-foreground\">success rate</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* SMS Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>SMS Features</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium\">Scheduled Messaging</p>\n                  <p className=\"text-sm text-muted-foreground\">Send messages at optimal times</p>\n                </div>\n              </div>\n              <Badge variant=\"default\">Active</Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Users className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <p className=\"font-medium\">Audience Segmentation</p>\n                  <p className=\"text-sm text-muted-foreground\">Target specific customer groups</p>\n                </div>\n              </div>\n              <Badge variant=\"default\">Active</Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <BarChart3 className=\"w-5 h-5 text-orange-600\" />\n                <div>\n                  <p className=\"font-medium\">Real-time Analytics</p>\n                  <p className=\"text-sm text-muted-foreground\">Track delivery and engagement</p>\n                </div>\n              </div>\n              <Badge variant=\"default\">Active</Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-bulk-sms\">\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Send Bulk SMS\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-two-way-sms\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Two-way Messaging\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-autoresponder\">\n              <Send className=\"w-4 h-4 mr-2\" />\n              Auto-responder\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-compliance\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Compliance Center\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Usage Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Usage Statistics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-4 border rounded-lg\">\n              <p className=\"text-2xl font-bold\">2,847</p>\n              <p className=\"text-sm text-muted-foreground\">Messages Today</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <p className=\"text-2xl font-bold\">$245.60</p>\n              <p className=\"text-sm text-muted-foreground\">Cost This Month</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <p className=\"text-2xl font-bold\">4,523</p>\n              <p className=\"text-sm text-muted-foreground\">Active Contacts</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <p className=\"text-2xl font-bold\">$0.086</p>\n              <p className=\"text-sm text-muted-foreground\">Avg. Cost Per SMS</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10213},"client/src/pages/social.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Share2, Users, Heart, MessageCircle, BarChart3, Calendar } from \"lucide-react\";\n\nexport default function Social() {\n  const posts = [\n    { id: \"SP001\", content: \"Excited to announce our new product launch! ðŸš€\", platform: \"LinkedIn\", status: \"published\", likes: 247, comments: 18, shares: 34, date: \"2024-01-15\" },\n    { id: \"SP002\", content: \"Join us at the industry conference next week\", platform: \"Twitter\", status: \"scheduled\", likes: 0, comments: 0, shares: 0, date: \"2024-01-20\" },\n    { id: \"SP003\", content: \"Behind the scenes at our development team\", platform: \"Instagram\", status: \"draft\", likes: 0, comments: 0, shares: 0, date: null }\n  ];\n\n  const platforms = [\n    { name: \"LinkedIn\", followers: 12847, engagement: \"4.2%\", posts: 24, color: \"blue\" },\n    { name: \"Twitter\", followers: 8932, engagement: \"2.8%\", posts: 45, color: \"cyan\" },\n    { name: \"Instagram\", followers: 15634, engagement: \"6.1%\", posts: 18, color: \"pink\" },\n    { name: \"Facebook\", followers: 9876, engagement: \"3.5%\", posts: 12, color: \"indigo\" }\n  ];\n\n  const analytics = [\n    { metric: \"Total Followers\", value: \"47.2K\", change: \"+1.2K\", trend: \"up\" },\n    { metric: \"Engagement Rate\", value: \"4.1%\", change: \"+0.3%\", trend: \"up\" },\n    { metric: \"Posts This Month\", value: \"99\", change: \"+15\", trend: \"up\" },\n    { metric: \"Reach\", value: \"156K\", change: \"+23K\", trend: \"up\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"social-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"social-title\">\n            Social Marketing\n          </h1>\n          <p className=\"text-muted-foreground\">Manage social media presence and campaigns</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-content-calendar\">\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Content Calendar\n          </Button>\n          <Button data-testid=\"button-create-post\">\n            <Share2 className=\"w-4 h-4 mr-2\" />\n            New Post\n          </Button>\n        </div>\n      </div>\n\n      {/* Social Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {analytics.map((item, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{item.metric}</p>\n                  <p className=\"text-2xl font-bold\">{item.value}</p>\n                  <p className={`text-sm ${item.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>\n                    {item.change}\n                  </p>\n                </div>\n                <BarChart3 className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Posts & Platforms */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Posts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {posts.map((post) => (\n                <div key={post.id} className=\"p-3 border rounded-lg\" data-testid={`post-${post.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge variant=\"outline\">{post.platform}</Badge>\n                    <Badge variant={\n                      post.status === \"published\" ? \"default\" :\n                      post.status === \"scheduled\" ? \"secondary\" :\n                      \"outline\"\n                    }>\n                      {post.status}\n                    </Badge>\n                  </div>\n                  \n                  <p className=\"text-sm mb-3\">{post.content}</p>\n                  \n                  {post.status === \"published\" && (\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center\">\n                        <Heart className=\"w-3 h-3 mr-1\" />\n                        {post.likes}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <MessageCircle className=\"w-3 h-3 mr-1\" />\n                        {post.comments}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Share2 className=\"w-3 h-3 mr-1\" />\n                        {post.shares}\n                      </div>\n                    </div>\n                  )}\n\n                  {post.status === \"scheduled\" && (\n                    <p className=\"text-sm text-muted-foreground\">Scheduled for: {post.date}</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Platform Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {platforms.map((platform, index) => (\n                <div key={index} className=\"p-3 border rounded-lg\" data-testid={`platform-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{platform.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{platform.followers.toLocaleString()} followers</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">{platform.engagement}</p>\n                      <p className=\"text-sm text-muted-foreground\">engagement</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{platform.posts} posts this month</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Social Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Social Media Tools</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-post-scheduler\">\n              <Calendar className=\"w-6 h-6 mb-2\" />\n              <span>Post Scheduler</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-content-library\">\n              <Share2 className=\"w-6 h-6 mb-2\" />\n              <span>Content Library</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-social-listening\">\n              <MessageCircle className=\"w-6 h-6 mb-2\" />\n              <span>Social Listening</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-performance-analytics\">\n              <BarChart3 className=\"w-6 h-6 mb-2\" />\n              <span>Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7484},"client/src/pages/studio.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Code, Palette, Layout, Settings, Zap, Database } from \"lucide-react\";\n\nexport default function Studio() {\n  const customizations = [\n    { name: \"Sales Pipeline\", type: \"Model\", status: \"active\", modified: \"2024-01-15\", description: \"Custom sales stages and automation\" },\n    { name: \"Product Form\", type: \"View\", status: \"draft\", modified: \"2024-01-16\", description: \"Enhanced product creation form\" },\n    { name: \"Customer Report\", type: \"Report\", status: \"active\", modified: \"2024-01-14\", description: \"Monthly customer analysis\" }\n  ];\n\n  const templates = [\n    { name: \"Project Management\", category: \"Business\", fields: 12, views: 4, description: \"Complete project tracking system\" },\n    { name: \"Event Planning\", category: \"Events\", fields: 8, views: 3, description: \"Event organization and management\" },\n    { name: \"Asset Tracking\", category: \"Inventory\", fields: 15, views: 5, description: \"Track company assets and equipment\" }\n  ];\n\n  const automations = [\n    { name: \"Lead Follow-up\", trigger: \"New Lead\", action: \"Send Email\", status: \"active\" },\n    { name: \"Invoice Reminder\", trigger: \"Due Date\", action: \"Email + SMS\", status: \"active\" },\n    { name: \"Task Assignment\", trigger: \"Project Update\", action: \"Assign Task\", status: \"paused\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"studio-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"studio-title\">\n            Studio\n          </h1>\n          <p className=\"text-muted-foreground\">Customize and extend your Odoo experience with no-code tools</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-automation-builder\">\n            <Zap className=\"w-4 h-4 mr-2\" />\n            Automation\n          </Button>\n          <Button data-testid=\"button-create-app\">\n            <Code className=\"w-4 h-4 mr-2\" />\n            Create App\n          </Button>\n        </div>\n      </div>\n\n      {/* Studio Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Custom Apps</p>\n                <p className=\"text-2xl font-bold\">12</p>\n                <p className=\"text-sm text-green-600\">3 published</p>\n              </div>\n              <Code className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Custom Fields</p>\n                <p className=\"text-2xl font-bold\">47</p>\n                <p className=\"text-sm text-blue-600\">Across 8 models</p>\n              </div>\n              <Database className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Automations</p>\n                <p className=\"text-2xl font-bold\">18</p>\n                <p className=\"text-sm text-green-600\">16 active</p>\n              </div>\n              <Zap className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Custom Views</p>\n                <p className=\"text-2xl font-bold\">23</p>\n                <p className=\"text-sm text-orange-600\">Forms & Lists</p>\n              </div>\n              <Layout className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Customizations & Templates */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Customizations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {customizations.map((custom, index) => (\n                <div key={index} className=\"p-3 border rounded-lg\" data-testid={`customization-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{custom.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{custom.description}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={custom.status === \"active\" ? \"default\" : \"secondary\"}>\n                        {custom.status}\n                      </Badge>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{custom.type}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Modified: {custom.modified}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>App Templates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {templates.map((template, index) => (\n                <div key={index} className=\"p-3 border rounded-lg\" data-testid={`template-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{template.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                    </div>\n                    <Badge variant=\"outline\">{template.category}</Badge>\n                  </div>\n                  <div className=\"flex justify-between text-sm text-muted-foreground\">\n                    <span>{template.fields} fields</span>\n                    <span>{template.views} views</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Development Tools */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Active Automations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {automations.map((automation, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`automation-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{automation.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {automation.trigger} â†’ {automation.action}\n                    </p>\n                  </div>\n                  <Badge variant={automation.status === \"active\" ? \"default\" : \"secondary\"}>\n                    {automation.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Studio Tools</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-model-builder\">\n              <Database className=\"w-4 h-4 mr-2\" />\n              Model Builder\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-view-designer\">\n              <Layout className=\"w-4 h-4 mr-2\" />\n              View Designer\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-automation-builder-detailed\">\n              <Zap className=\"w-4 h-4 mr-2\" />\n              Automation Builder\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-report-designer\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Report Designer\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Development Environment */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Development Environment</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Code className=\"w-12 h-12 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-2\">Code Editor</h3>\n              <p className=\"text-sm text-muted-foreground\">Write custom Python code and XML views</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Palette className=\"w-12 h-12 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-2\">Theme Designer</h3>\n              <p className=\"text-sm text-muted-foreground\">Customize the look and feel of your apps</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Database className=\"w-12 h-12 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-2\">Database Schema</h3>\n              <p className=\"text-sm text-muted-foreground\">Manage models, fields, and relationships</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10030},"client/src/pages/surveys.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ClipboardList, Users, BarChart3, Send, Eye, Plus } from \"lucide-react\";\n\nexport default function Surveys() {\n  const surveys = [\n    { id: \"SV001\", title: \"Customer Satisfaction Survey\", status: \"active\", responses: 234, target: 500, created: \"2024-01-10\", completion: 89 },\n    { id: \"SV002\", title: \"Employee Feedback Q1\", status: \"closed\", responses: 156, target: 200, created: \"2024-01-05\", completion: 78 },\n    { id: \"SV003\", title: \"Product Feature Requests\", status: \"draft\", responses: 0, target: 300, created: \"2024-01-15\", completion: 0 }\n  ];\n\n  const templates = [\n    { name: \"Customer Satisfaction\", category: \"Customer\", questions: 12, icon: \"ðŸ˜Š\" },\n    { name: \"Employee Engagement\", category: \"HR\", questions: 15, icon: \"ðŸ‘¥\" },\n    { name: \"Product Feedback\", category: \"Product\", questions: 8, icon: \"ðŸ“¦\" },\n    { name: \"Event Evaluation\", category: \"Events\", questions: 10, icon: \"ðŸŽ‰\" }\n  ];\n\n  const analytics = [\n    { metric: \"Response Rate\", value: \"73.5%\", change: \"+5.2%\", trend: \"up\" },\n    { metric: \"Avg. Completion\", value: \"82.1%\", change: \"+12.3%\", trend: \"up\" },\n    { metric: \"Total Responses\", value: \"1,547\", change: \"+23.4%\", trend: \"up\" },\n    { metric: \"Active Surveys\", value: \"8\", change: \"+2\", trend: \"up\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"surveys-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"surveys-title\">\n            Surveys\n          </h1>\n          <p className=\"text-muted-foreground\">Create and manage surveys to collect feedback and insights</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-survey-templates\">\n            <ClipboardList className=\"w-4 h-4 mr-2\" />\n            Templates\n          </Button>\n          <Button data-testid=\"button-create-survey\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Survey\n          </Button>\n        </div>\n      </div>\n\n      {/* Survey Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {analytics.map((item, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{item.metric}</p>\n                  <p className=\"text-2xl font-bold\">{item.value}</p>\n                  <p className={`text-sm ${item.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>\n                    {item.change}\n                  </p>\n                </div>\n                <BarChart3 className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Surveys & Templates */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Active Surveys</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {surveys.map((survey) => (\n                <div key={survey.id} className=\"p-3 border rounded-lg\" data-testid={`survey-${survey.id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{survey.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">{survey.id} â€¢ Created {survey.created}</p>\n                    </div>\n                    <Badge variant={\n                      survey.status === \"active\" ? \"default\" :\n                      survey.status === \"closed\" ? \"secondary\" :\n                      \"outline\"\n                    }>\n                      {survey.status}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Responses: {survey.responses} / {survey.target}</span>\n                      <span>Completion: {survey.completion}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full\"\n                        style={{ width: `${(survey.responses / survey.target) * 100}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-2 mt-3\">\n                    <Button size=\"sm\" variant=\"outline\" data-testid={`view-survey-${survey.id}`}>\n                      <Eye className=\"w-3 h-3 mr-1\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" data-testid={`send-survey-${survey.id}`}>\n                      <Send className=\"w-3 h-3 mr-1\" />\n                      Send\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" data-testid={`analyze-survey-${survey.id}`}>\n                      <BarChart3 className=\"w-3 h-3 mr-1\" />\n                      Analyze\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Survey Templates</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {templates.map((template, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\" data-testid={`template-${index}`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-2xl\">{template.icon}</span>\n                    <div>\n                      <p className=\"font-medium\">{template.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{template.questions} questions â€¢ {template.category}</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\">\n                    Use Template\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Survey Builder */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Survey Builder</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-question-builder\">\n              <ClipboardList className=\"w-6 h-6 mb-2\" />\n              <span>Question Builder</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-survey-logic\">\n              <BarChart3 className=\"w-6 h-6 mb-2\" />\n              <span>Survey Logic</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-distribution\">\n              <Send className=\"w-6 h-6 mb-2\" />\n              <span>Distribution</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-analytics\">\n              <Users className=\"w-6 h-6 mb-2\" />\n              <span>Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7801},"client/src/pages/website.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Globe, Edit3, Eye, Users, BarChart3, Settings } from \"lucide-react\";\n\nexport default function Website() {\n  const pages = [\n    { name: \"Home\", url: \"/\", status: \"published\", visitors: 1247, updated: \"2024-01-15\" },\n    { name: \"About Us\", url: \"/about\", status: \"published\", visitors: 856, updated: \"2024-01-12\" },\n    { name: \"Products\", url: \"/products\", status: \"published\", visitors: 2341, updated: \"2024-01-14\" },\n    { name: \"Contact\", url: \"/contact\", status: \"draft\", visitors: 0, updated: \"2024-01-16\" }\n  ];\n\n  const analytics = [\n    { metric: \"Page Views\", value: \"12,847\", change: \"+15.2%\", trend: \"up\" },\n    { metric: \"Unique Visitors\", value: \"3,291\", change: \"+8.7%\", trend: \"up\" },\n    { metric: \"Bounce Rate\", value: \"34.2%\", change: \"-2.1%\", trend: \"down\" },\n    { metric: \"Avg. Session\", value: \"3m 24s\", change: \"+12.3%\", trend: \"up\" }\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" data-testid=\"website-content\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"website-title\">\n            Website\n          </h1>\n          <p className=\"text-muted-foreground\">Build and manage your company website</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" data-testid=\"button-view-website\">\n            <Eye className=\"w-4 h-4 mr-2\" />\n            View Website\n          </Button>\n          <Button data-testid=\"button-create-page\">\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            New Page\n          </Button>\n        </div>\n      </div>\n\n      {/* Website Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {analytics.map((item, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{item.metric}</p>\n                  <p className=\"text-2xl font-bold\">{item.value}</p>\n                  <p className={`text-sm ${item.trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>\n                    {item.change}\n                  </p>\n                </div>\n                <BarChart3 className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Pages Management */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Website Pages</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pages.map((page, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\" data-testid={`page-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">{page.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{page.url}</p>\n                    <p className=\"text-sm text-muted-foreground\">Updated: {page.updated}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge variant={page.status === \"published\" ? \"default\" : \"secondary\"}>\n                      {page.status}\n                    </Badge>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{page.visitors} visitors</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-edit-homepage\">\n              <Edit3 className=\"w-4 h-4 mr-2\" />\n              Edit Homepage\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-customize-theme\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Customize Theme\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-configure-domain\">\n              <Globe className=\"w-4 h-4 mr-2\" />\n              Configure Domain\n            </Button>\n            <Button className=\"w-full justify-start\" variant=\"outline\" data-testid=\"button-seo-settings\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              SEO Settings\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Website Builder Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Website Builder</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Edit3 className=\"w-12 h-12 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-2\">Page Editor</h3>\n              <p className=\"text-sm text-muted-foreground\">Drag & drop page builder with live preview</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Settings className=\"w-12 h-12 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-2\">Theme Designer</h3>\n              <p className=\"text-sm text-muted-foreground\">Customize colors, fonts, and layouts</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <BarChart3 className=\"w-12 h-12 mx-auto mb-2 text-primary\" />\n              <h3 className=\"font-medium mb-2\">Analytics</h3>\n              <p className=\"text-sm text-muted-foreground\">Track visitor behavior and performance</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6116},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483}},"version":1}